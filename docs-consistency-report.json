{
  "summary": {
    "total_files": 101,
    "contradictions_found": 1,
    "redundancy_found": 0,
    "broken_links_found": 1,
    "outdated_refs_found": 0
  },
  "contradictions": [
    {
      "category": "type_inference",
      "severity": "high",
      "description": "Conflicting guidance on ReturnType usage",
      "sources": {
        "allowed": [
          {
            "statement": "Canonical Service\n\nService Layer Blueprint PT-2 captures service patterns PT-1 anti-patterns Type System Anti-Patterns `ReturnType createXService inference parameters safety Incomplete interfaces casting Object spread without type guards Architectural Anti-Patterns Dual rating-slip Class-based service abstractions Over-engineered ServiceFactory caching class wrappers services Duplicate factory patterns Global state management Global real managers Export/Module Anti-Patterns Mixed default named exports Zero-value wrapper functions Runtime validation factory functions Player Visit Rating Slip Casino MTL Compliance Table Context services PT-1 Client Layer Service Orchestration Core Domain Services Service Module CompositionRY Queries TRN Mapping VAL Module Checks Shared Service Infrastructure Handling SR DTO DTOs VAL Schemas Data Layer SB Client DB Enabled RT-time Connections Client Service UI Hooks SF Actions Service Factory Pattern PS VS RS CS TC MS NS CPS Module Composition Service PS CRUD QRY TRN TRN CRUD BUS QRY TRN\n\nCS CRUD QRY TRN VAL CRUD QRY TRN VAL CRUD QRY TRN VAL Shared Infrastructure Usage CRUD QRY SR TRN DTO VAL_SCH Data Layer Connections CRUD QRY DB RT service#e1f5fe#01579b module#f3e5f5#4a148c#fff3e0 data#e8f5e9#1b5e20 client#fce4ec#880e4f orchestration#f0f4c3#33691e PS CRUD_SCH SB UI SF orchestration",
            "source": "system-prd/SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md",
            "line": 3,
            "matched": "anti-pattern"
          },
          {
            "statement": "Canonical Service\n\nService Layer Blueprint PT-2 captures service patterns PT-1 anti-patterns Type System Anti-Patterns `ReturnType createXService inference parameters safety Incomplete interfaces casting Object spread without type guards Architectural Anti-Patterns Dual rating-slip Class-based service abstractions Over-engineered ServiceFactory caching class wrappers services Duplicate factory patterns Global state management Global real managers Export/Module Anti-Patterns Mixed default named exports Zero-value wrapper functions Runtime validation factory functions Player Visit Rating Slip Casino MTL Compliance Table Context services PT-1 Client Layer Service Orchestration Core Domain Services Service Module CompositionRY Queries TRN Mapping VAL Module Checks Shared Service Infrastructure Handling SR DTO DTOs VAL Schemas Data Layer SB Client DB Enabled RT-time Connections Client Service UI Hooks SF Actions Service Factory Pattern PS VS RS CS TC MS NS CPS Module Composition Service PS CRUD QRY TRN TRN CRUD BUS QRY TRN\n\nCS CRUD QRY TRN VAL CRUD QRY TRN VAL CRUD QRY TRN VAL Shared Infrastructure Usage CRUD QRY SR TRN DTO VAL_SCH Data Layer Connections CRUD QRY DB RT service#e1f5fe#01579b module#f3e5f5#4a148c#fff3e0 data#e8f5e9#1b5e20 client#fce4ec#880e4f orchestration#f0f4c3#33691e PS CRUD_SCH SB UI SF orchestration",
            "source": "system-prd/SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md",
            "line": 3,
            "matched": "ReturnType"
          },
          {
            "statement": "Domain Player search Identity management Profile validation Visit tracking statistics transition Rating Slip Point calculations Table assignments Status transitions Casino table Floor Game settings Inventory management Chip counts Shift handovers Fill slips MTL Money transaction logging CTR reporting$10k Gaming day calculations Compliance Audit trails Notes Staff Audit logging Witness checks validations Regulatory reporting\n\nGuidelines PT-2 Use factories creation Declare interfaces signatures Type Export types Compose services specialized modules Return `ServiceResult<T> operations `executeOperation wrapper business logic modules DTOs boundaries Validate inputs Enable RLS tables Keep factories pure stateless named exports default Anti class inheritance Create ServiceFactory factory patterns `ReturnType inference parameters type casting bypass interfaces class wrappers Leave methods undeclared interfaces Mix default named exports Add runtime validation functions dev-only assertions zero-value wrapper functions business logic CRUD modules Access Supabase UI Store server data `staleTime 0 React Query real-time managers Mix service type responsibilities Cache instances\n\nMigration Priorities Core infrastructure service error handling Player Visit services Rating Slip Casino Table Context services MTL Compliance services",
            "source": "system-prd/SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md",
            "line": 11,
            "matched": "ReturnType"
          },
          {
            "statement": "System Requirements Patterns Data Supabase Integration Seed new project baseline migration Enforce forward-only migrations timestamped filenames CI validation shared Supabase client factories browser No client instantiation UI stores Enable RLS tables templates-policies Configure audit logging triggers Type System Generate `database.types.ts Supabase check repo Treat.types.ts source DTO/view/helper modules types type Shared helpers `types/helpers reference canonical definitions Build tooling regenerates `database.types.ts schema change fails stale alternative Schema rebuilds regenerate canonical file parallel type directories Forward-only SQL migrations regenerate types commit diff typecheckschema correction new migration types manual Single database.types repo fails stale types alternate schema types DTO/View files compile against Database 3.3 Service Layer System Standards Interface service factory interface methods type signatures Return interface factory export interface PlayerService searchPlayers createPlayerService\n\n`ReturnType use service types export explicit interface PlayerService IPlayerService Factory functions type `supabase `SupabaseClient<Database> use `any Object Spread Without explicit return type interface prevents overwrites Correct export CasinoService CasinoCrudService CasinoTablesService interface createCasinoService ...crud ...tables Wrong untyped spread createCasinoService Export Export factory function service type Name `createXService XService Service Architecture\n\nfunctional module pattern export factories functions Supabase calls Centralize helpers `generateRequestId utilities/shared domain logic database types prohibit hand table contracts Use DTOs/domains inputs/outputs Drop class abstractions V2 services factories modules Dependency injection call site Define typed error catalogue domain PlayerServiceError ValidationFailed return Map enum HTTP responses UI messaging Preserve layering CRUD modules persistence.ts workflows.ts/ adapters Document data layers add unit tests function Implement validation Zod schemas Define reusable schemas DTOs input validation rule enforcement operations validate inputs.safeParse() before processingschemas field-level constraints error messages Instantiate Supabase clients helpers cookie refresh auth flow Inject client service factory constructs client touches cookies operation tables wrap Postgres function run RPC Supavisor transaction-mode connections short session mode long-running Document concurrency expectations business module rating-slip status transitions check current status table-context updates prevent double-closes",
            "source": "system-prd/CANONICAL_BLUEPRINT_MVP_PRD.md",
            "line": 9,
            "matched": "ReturnType"
          },
          {
            "statement": "UI Component Pattern `components/{domain-form.tsx import useState from createXAction from/app/actions/x/create-x export function XForm( [field1 useState( [loading useState [message setMessage useState \"success text string null handleSubmit async React.FormEvent.preventDefault setLoading(true); setMessage result await createXAction( field1 field2 \"value\".success.data setMessage.data.id setField1(\" setMessage \"Operation (error setMessage \"Unexpected error setLoading(false); return <form onSubmit className-green-600-red-600 value{field1 onChange setField1(e.target.value) <button type=\"submit{loading\n\nOperational Guardrails Service Read template Review service Check PRD anti-pattern list PT-1 violations extract helpers 3rd use-Violation Rewrite PT-1 code violation Cap PT-1 exploration \u22644h per module Document code End-of-Week Audit No `ReturnType inference exports typed parameters-rebuilt imports/types.ts files@deprecated code `console.* operations tests passing Type-check clean\n\nError Code Catalogue codes HTTP Status `DUPLICATE_X 400 constraint violation PostgreSQL error_FOUND 404 Entity PGRST116 error_ERROR 400 failed validation `UNAUTHORIZED 401 Auth RLS policy violation `FORBIDDEN 403 Action allowed Business rule violation_FAILED 500 Unexpected error unknown errors{DOMAIN_UPDATE_EXISTS",
            "source": "patterns/SERVICE_TEMPLATE.md",
            "line": 21,
            "matched": "anti-pattern"
          },
          {
            "statement": "UI Component Pattern `components/{domain-form.tsx import useState from createXAction from/app/actions/x/create-x export function XForm( [field1 useState( [loading useState [message setMessage useState \"success text string null handleSubmit async React.FormEvent.preventDefault setLoading(true); setMessage result await createXAction( field1 field2 \"value\".success.data setMessage.data.id setField1(\" setMessage \"Operation (error setMessage \"Unexpected error setLoading(false); return <form onSubmit className-green-600-red-600 value{field1 onChange setField1(e.target.value) <button type=\"submit{loading\n\nOperational Guardrails Service Read template Review service Check PRD anti-pattern list PT-1 violations extract helpers 3rd use-Violation Rewrite PT-1 code violation Cap PT-1 exploration \u22644h per module Document code End-of-Week Audit No `ReturnType inference exports typed parameters-rebuilt imports/types.ts files@deprecated code `console.* operations tests passing Type-check clean\n\nError Code Catalogue codes HTTP Status `DUPLICATE_X 400 constraint violation PostgreSQL error_FOUND 404 Entity PGRST116 error_ERROR 400 failed validation `UNAUTHORIZED 401 Auth RLS policy violation `FORBIDDEN 403 Action allowed Business rule violation_FAILED 500 Unexpected error unknown errors{DOMAIN_UPDATE_EXISTS",
            "source": "patterns/SERVICE_TEMPLATE.md",
            "line": 21,
            "matched": "deprecated"
          },
          {
            "statement": "UI Component Pattern `components/{domain-form.tsx import useState from createXAction from/app/actions/x/create-x export function XForm( [field1 useState( [loading useState [message setMessage useState \"success text string null handleSubmit async React.FormEvent.preventDefault setLoading(true); setMessage result await createXAction( field1 field2 \"value\".success.data setMessage.data.id setField1(\" setMessage \"Operation (error setMessage \"Unexpected error setLoading(false); return <form onSubmit className-green-600-red-600 value{field1 onChange setField1(e.target.value) <button type=\"submit{loading\n\nOperational Guardrails Service Read template Review service Check PRD anti-pattern list PT-1 violations extract helpers 3rd use-Violation Rewrite PT-1 code violation Cap PT-1 exploration \u22644h per module Document code End-of-Week Audit No `ReturnType inference exports typed parameters-rebuilt imports/types.ts files@deprecated code `console.* operations tests passing Type-check clean\n\nError Code Catalogue codes HTTP Status `DUPLICATE_X 400 constraint violation PostgreSQL error_FOUND 404 Entity PGRST116 error_ERROR 400 failed validation `UNAUTHORIZED 401 Auth RLS policy violation `FORBIDDEN 403 Action allowed Business rule violation_FAILED 500 Unexpected error unknown errors{DOMAIN_UPDATE_EXISTS",
            "source": "patterns/SERVICE_TEMPLATE.md",
            "line": 21,
            "matched": "ReturnType"
          },
          {
            "statement": "Three-Phase Approach Purpose Output TDD validate PT-2 patterns() flows RLS guardrails Revisit PT-1 constructs logic query joins error mapping Re-implemented modules PRD-compliant debt-free Capture pattern `SERVICE_TEMPLATE.md\n\nOperational Guardrails relapse PT-1 migration Rule of Three refactor repeated three create/shared/validation.ts 3 services same validation pattern One-Violation Rule PT-1 artifact breaks PRD clause rewrite Violations `ReturnType `supabase/database-rebuilt imports@deprecated code BaseService abstractions code contains don't import Time-Box Mining PT-1 exploration \u22644 hours per module longer rebuild debugging legacy debt new features End-of-Week Audit audit checklist legacy imports ReturnType inference_TEMPLATE Document Code JSDoc before ADRs prevents drift Creates new player duplicate email detection creation ServiceResult DUPLICATE_EMAIL error.create firstName lastName consoledata\n\nImplementation Timeline Week 1: Player Service TDD() Shared infrastructure Test suite foundation(() operations Duplicate email update validation CRUD cycle scoring queries Rewrite Database types interfaces Test borrowed patterns Integration tests End-week audit checklist_TEMPLATE.md finalization Player service reusable template Week 2: Visit Service Apply Player template operations end cancel State transition validation Business logic management Queries visits history Integration tests Week 3: RatingSlip Service patterns TDD rating calculations Point accrual Table/seat assignment Status transitions Integration tests",
            "source": "patterns/controlled-hybrid-refactor-model.md",
            "line": 5,
            "matched": "deprecated"
          },
          {
            "statement": "Three-Phase Approach Purpose Output TDD validate PT-2 patterns() flows RLS guardrails Revisit PT-1 constructs logic query joins error mapping Re-implemented modules PRD-compliant debt-free Capture pattern `SERVICE_TEMPLATE.md\n\nOperational Guardrails relapse PT-1 migration Rule of Three refactor repeated three create/shared/validation.ts 3 services same validation pattern One-Violation Rule PT-1 artifact breaks PRD clause rewrite Violations `ReturnType `supabase/database-rebuilt imports@deprecated code BaseService abstractions code contains don't import Time-Box Mining PT-1 exploration \u22644 hours per module longer rebuild debugging legacy debt new features End-of-Week Audit audit checklist legacy imports ReturnType inference_TEMPLATE Document Code JSDoc before ADRs prevents drift Creates new player duplicate email detection creation ServiceResult DUPLICATE_EMAIL error.create firstName lastName consoledata\n\nImplementation Timeline Week 1: Player Service TDD() Shared infrastructure Test suite foundation(() operations Duplicate email update validation CRUD cycle scoring queries Rewrite Database types interfaces Test borrowed patterns Integration tests End-week audit checklist_TEMPLATE.md finalization Player service reusable template Week 2: Visit Service Apply Player template operations end cancel State transition validation Business logic management Queries visits history Integration tests Week 3: RatingSlip Service patterns TDD rating calculations Point accrual Table/seat assignment Status transitions Integration tests",
            "source": "patterns/controlled-hybrid-refactor-model.md",
            "line": 5,
            "matched": "ReturnType"
          },
          {
            "statement": "Three-Phase Approach Purpose Output TDD validate PT-2 patterns() flows RLS guardrails Revisit PT-1 constructs logic query joins error mapping Re-implemented modules PRD-compliant debt-free Capture pattern `SERVICE_TEMPLATE.md\n\nOperational Guardrails relapse PT-1 migration Rule of Three refactor repeated three create/shared/validation.ts 3 services same validation pattern One-Violation Rule PT-1 artifact breaks PRD clause rewrite Violations `ReturnType `supabase/database-rebuilt imports@deprecated code BaseService abstractions code contains don't import Time-Box Mining PT-1 exploration \u22644 hours per module longer rebuild debugging legacy debt new features End-of-Week Audit audit checklist legacy imports ReturnType inference_TEMPLATE Document Code JSDoc before ADRs prevents drift Creates new player duplicate email detection creation ServiceResult DUPLICATE_EMAIL error.create firstName lastName consoledata\n\nImplementation Timeline Week 1: Player Service TDD() Shared infrastructure Test suite foundation(() operations Duplicate email update validation CRUD cycle scoring queries Rewrite Database types interfaces Test borrowed patterns Integration tests End-week audit checklist_TEMPLATE.md finalization Player service reusable template Week 2: Visit Service Apply Player template operations end cancel State transition validation Business logic management Queries visits history Integration tests Week 3: RatingSlip Service patterns TDD rating calculations Point accrual Table/seat assignment Status transitions Integration tests",
            "source": "patterns/controlled-hybrid-refactor-model.md",
            "line": 5,
            "matched": "ReturnType"
          },
          {
            "statement": "Executive Summary Phase 5 Tracking casino player management Phase 4 pattern delegation achieved 100% success zero rework Achievements Extended 3 methods search 6 error handling 3 ADR-003 cache invalidation 4 production-ready React components 26 tests passing benchmarks met< 1s list < 300ms search Zero TypeScript errors\n\nWave Wave 1: Service Layer Extensions 1 hour Backend Architect 2/visit/crud.ts Added 3 methods string violation VisitFilters(query string Player-based search/visit/index.ts Updated interface exports Quality Gates Explicit interfaces Comprehensive error handling violations `executeOperation wrapper<Database> typing JSDoc comments methods No `ReturnType inference Zero errors visit service Wave 2A Server Actions 1.5 hours Backend Architect 1/visit-actions6 server actions new(id Fetch single visit Search player info Quality Gates (6/6 actions `withServerActionWrapper Comprehensive JSDoc error codes error handling wrapper Type-safe service integration No business logic Consistent naming convention Features FK violation mapping NOT_FOUND handling Validation error mapping (23514 23502) Production-ready audit logging Wave 2B Query Hooks 1 hour TypeScript Pro 4 Deliverables/visit/use Single visit ID Query key StaleTime 5 minutes List filters Query playerId casinoId status mode 2 minutes-search Query 5 minutes/index Barrel exports\n\nQuality Gates (4/4) hooks template keys hierarchical pattern staleTime Enabled conditions prevent fetches Features query key serialization Automatic query trimming search Comprehensive JSDoc examples Wave 3A Mutation Hooks 1.5 hours TypeScript Pro 3 Deliverables-create Domain-level invalidation Invalidates-update-visit Granular invalidation Invalidates `UpdateVisitVariables-delete-visitStrategy Query removal Removes Invalidates Quality Gates (4/4 hooks template invalidation strategies ADR-003 Success messages TypeScript inference Features Three cache strategies type safety custom variables error handling Real-world usage examples Wave 3B UI Components 3.5 hours Full-Stack Developer 5 Deliverables/visits/visit-list Table filters search Status badges Loading states Action buttons Edit Delete Results count-form Dual mode-form validation error messages tracking Success states-detail information Player casino info timeline duration Related records Action buttons Delete-delete-dialog UI AlertDialog Confirmation details violation error Loading states/ui/selectshadcn/ui accessibility",
            "source": "phases/phase-5/PHASE_5_COMPLETION_REPORT.md",
            "line": 5,
            "matched": "ReturnType"
          },
          {
            "statement": "Services Validated CRUD Operations Query Operations Status Casino Create Read Update Delete N/A PASS Player Create Update N/A Visit RatingSlip N/A TableContext Create Delete ListByCasino N/A PASS MTL Create Delete ListByGamingDay PASS\n\nInfrastructure Validation Phase 3 Components Tested use operations return structured ServiceResult<T> PostgreSQL errors codes Database types services Referential integrity database Duplicate data prevention Service Architecture Standards Validated Functional factory pattern classes Explicit interfaces ReturnType inference Typed supabase parameters Proper DTO naming separation\n\nIssues Found Resolved Issues Discovered Interface used incorrect field names Service interfaces evolved assumptions older API Updated test calls match DTOs No service changes tests match interfaces Enum RESOLVED uppercase enum valuesdatabase enums_in_out Updated enum references match database schema Tests use lowercase enum values Required MTL requires `tenderType `recordedByEmployeeId RatingSlip `playerId Staff table requires `updatedAt Updated test data required fields validation required field constraints MTL references Created Staff records role enum testing Confirmed FK relationships database schema Code FK violations return error `23502 instead UUID fields non entities trigger NULL constraint before Updated error expectations accept `23502 data errors robust error handling tests",
            "source": "phases/phase-3/integration-test-results.md",
            "line": 15,
            "matched": "classes"
          },
          {
            "statement": "Services Validated CRUD Operations Query Operations Status Casino Create Read Update Delete N/A PASS Player Create Update N/A Visit RatingSlip N/A TableContext Create Delete ListByCasino N/A PASS MTL Create Delete ListByGamingDay PASS\n\nInfrastructure Validation Phase 3 Components Tested use operations return structured ServiceResult<T> PostgreSQL errors codes Database types services Referential integrity database Duplicate data prevention Service Architecture Standards Validated Functional factory pattern classes Explicit interfaces ReturnType inference Typed supabase parameters Proper DTO naming separation\n\nIssues Found Resolved Issues Discovered Interface used incorrect field names Service interfaces evolved assumptions older API Updated test calls match DTOs No service changes tests match interfaces Enum RESOLVED uppercase enum valuesdatabase enums_in_out Updated enum references match database schema Tests use lowercase enum values Required MTL requires `tenderType `recordedByEmployeeId RatingSlip `playerId Staff table requires `updatedAt Updated test data required fields validation required field constraints MTL references Created Staff records role enum testing Confirmed FK relationships database schema Code FK violations return error `23502 instead UUID fields non entities trigger NULL constraint before Updated error expectations accept `23502 data errors robust error handling tests",
            "source": "phases/phase-3/integration-test-results.md",
            "line": 15,
            "matched": "ReturnType"
          },
          {
            "statement": "Task 2.1 Service Query Hook Template Deliverables Created-service-query (81 lines/README.md (296 lines query documentation Features Implemented ServiceResult<T> Automatic mapping service layer true data returns false ServiceError throws Error Type-Safe Generic export useServiceQuery<TData readonly string queryFnError ServiceError code preserved on Error object Enables error handling Null data validation success=true data=null Query Key Pattern Documentation[domain operation ...params 7 Domains 'detail id query 2. id 3. **Visit** 'detail id playerId 'history playerId 'date-range {start end 4. **Rating Slip**-slip 'list 'detail id-visit visitId-player playerId-range {start end 5. **Table Context**-context 'list 'detail id-table tableId 'active 6. **Table** 'list 'detail id-casino casinoId-player 30 query key examples 7 domains Basic usage loading/error Conditional fetching `enabled Pagination `keepPreviousData Search debouncing Dependent queries fetching Error handling ServiceError code Type safety examples Template handles Result<T React Query mapping TypeScript generics type inference Query key pattern 7 domains (30 examples README usage examples\n\nArchitecture Compliance Functional pattern classes Explicit typing inference ServiceResult No type casting. statements\n\nTask 2.2 Service Mutation Hook Template Deliverables Created-service-mutation.ts (96 lines/README.md 729 lines Key Features Implemented ServiceResult<T> Mutation export useServiceMutation<TData TVariables ServiceError Omit<UseMutationOptions UseMutationResult Cache Invalidation Create operations bulk changes `invalidateQueries( Targeted updates `invalidateQueries Delete operations `removeQueries Error ServiceError details.details Preserves error context (code message details status Compatible React Query's Error type CRUD Operation Patterns createPlayer useServiceMutation createPlayerAction queryClientinvalidateQueries('player updatePlayer useServiceMutation( updatePlayerAction variables queryClient.invalidateQueries **Delete deletePlayer useServiceMutation( deletePlayerAction playerId queryClient.removeQueries Documentation Coverage Overview integration useServiceQuery documentation documentation Query key patterns Cache invalidation strategies Error handling Type safety guidelines Testing examples Advanced patterns updates Best practices 36+ mutation examples Quality Template handles Result<T> mutations Cache invalidation patterns TypeScript generics work README includes create/update/delete examples Architecture Compliance Functional pattern classes Explicit typing `ReturnType inference Compatible with `withServerAction wrapper Uses `ServiceResult<T>/shared/typesReferences `queryClient/query-client.ts`",
            "source": "phases/phase-3/WAVE_2_SIGNOFF.md",
            "line": 9,
            "matched": "classes"
          },
          {
            "statement": "Architecture Compliance Functional pattern classes Explicit typing inference ServiceResult No type casting. statements\n\nTask 2.2 Service Mutation Hook Template Deliverables Created-service-mutation.ts (96 lines/README.md 729 lines Key Features Implemented ServiceResult<T> Mutation export useServiceMutation<TData TVariables ServiceError Omit<UseMutationOptions UseMutationResult Cache Invalidation Create operations bulk changes `invalidateQueries( Targeted updates `invalidateQueries Delete operations `removeQueries Error ServiceError details.details Preserves error context (code message details status Compatible React Query's Error type CRUD Operation Patterns createPlayer useServiceMutation createPlayerAction queryClientinvalidateQueries('player updatePlayer useServiceMutation( updatePlayerAction variables queryClient.invalidateQueries **Delete deletePlayer useServiceMutation( deletePlayerAction playerId queryClient.removeQueries Documentation Coverage Overview integration useServiceQuery documentation documentation Query key patterns Cache invalidation strategies Error handling Type safety guidelines Testing examples Advanced patterns updates Best practices 36+ mutation examples Quality Template handles Result<T> mutations Cache invalidation patterns TypeScript generics work README includes create/update/delete examples Architecture Compliance Functional pattern classes Explicit typing `ReturnType inference Compatible with `withServerAction wrapper Uses `ServiceResult<T>/shared/typesReferences `queryClient/query-client.ts`\n\nInfrastructure Readiness Wave 3 Prerequisites React Query 1.1 Server action wrapper 1.2 stores 1.3 ADR-003 draft 1.4 hook template 2.1 2.2 Query key patterns Cache invalidation strategies Dependencies Wave 3 tests infrastructure Documentation onboarding Service Layer Server Actions 1.2 Query Hooks 2.1 2.2 React Components",
            "source": "phases/phase-3/WAVE_2_SIGNOFF.md",
            "line": 11,
            "matched": "classes"
          },
          {
            "statement": "Architecture Compliance Functional pattern classes Explicit typing inference ServiceResult No type casting. statements\n\nTask 2.2 Service Mutation Hook Template Deliverables Created-service-mutation.ts (96 lines/README.md 729 lines Key Features Implemented ServiceResult<T> Mutation export useServiceMutation<TData TVariables ServiceError Omit<UseMutationOptions UseMutationResult Cache Invalidation Create operations bulk changes `invalidateQueries( Targeted updates `invalidateQueries Delete operations `removeQueries Error ServiceError details.details Preserves error context (code message details status Compatible React Query's Error type CRUD Operation Patterns createPlayer useServiceMutation createPlayerAction queryClientinvalidateQueries('player updatePlayer useServiceMutation( updatePlayerAction variables queryClient.invalidateQueries **Delete deletePlayer useServiceMutation( deletePlayerAction playerId queryClient.removeQueries Documentation Coverage Overview integration useServiceQuery documentation documentation Query key patterns Cache invalidation strategies Error handling Type safety guidelines Testing examples Advanced patterns updates Best practices 36+ mutation examples Quality Template handles Result<T> mutations Cache invalidation patterns TypeScript generics work README includes create/update/delete examples Architecture Compliance Functional pattern classes Explicit typing `ReturnType inference Compatible with `withServerAction wrapper Uses `ServiceResult<T>/shared/typesReferences `queryClient/query-client.ts`\n\nInfrastructure Readiness Wave 3 Prerequisites React Query 1.1 Server action wrapper 1.2 stores 1.3 ADR-003 draft 1.4 hook template 2.1 2.2 Query key patterns Cache invalidation strategies Dependencies Wave 3 tests infrastructure Documentation onboarding Service Layer Server Actions 1.2 Query Hooks 2.1 2.2 React Components",
            "source": "phases/phase-3/WAVE_2_SIGNOFF.md",
            "line": 11,
            "matched": "ReturnType"
          },
          {
            "statement": "handle click events async const onClickMock player id '123 name Doe 'GOLD render<PlayerCard onClick await userEvent.click.getByRole('button expect(onClickMock).toHaveBeenCalledWith'123 E2E Test Cypress/player-flow Management Flow.login('test@example 'password create new player/players.findByRole('button /add player'Jane Smith/tier'GOLD'button /save'Jane Smith.visible created successfully\n\nAnti-Pattern Enforcement Section 4) ESLint Rules Global Anti-Patterns Forbidden Supabase client components client createClient(url console.log production message console.warn.error any type data response test.only CI Service Layer Specific.eslintrc-services.js Forbidden ReturnType Service createPlayerService Forbidden Class-based services PlayerService Default exports createPlayerService named exports Global real-time managers createGlobalManager @deprecated code newFunction deprecated code Lint Commands lint Check files-fix issues\n\nCI Workflow.github/workflows/ci.yml Pipeline Stages `npm ci run-pattern checks/Integration run test:ci run run e2e:headless Codecov Environment Variables_PUBLIC_SUPABASE_URL project URL_ANON_KEY anonymous key Runtime Full pipeline ~3-5 minutes PRD Fast feedback<2min unit tests",
            "source": "phases/phase-0/TESTING_SETUP.md",
            "line": 15,
            "matched": "deprecated"
          },
          {
            "statement": "handle click events async const onClickMock player id '123 name Doe 'GOLD render<PlayerCard onClick await userEvent.click.getByRole('button expect(onClickMock).toHaveBeenCalledWith'123 E2E Test Cypress/player-flow Management Flow.login('test@example 'password create new player/players.findByRole('button /add player'Jane Smith/tier'GOLD'button /save'Jane Smith.visible created successfully\n\nAnti-Pattern Enforcement Section 4) ESLint Rules Global Anti-Patterns Forbidden Supabase client components client createClient(url console.log production message console.warn.error any type data response test.only CI Service Layer Specific.eslintrc-services.js Forbidden ReturnType Service createPlayerService Forbidden Class-based services PlayerService Default exports createPlayerService named exports Global real-time managers createGlobalManager @deprecated code newFunction deprecated code Lint Commands lint Check files-fix issues\n\nCI Workflow.github/workflows/ci.yml Pipeline Stages `npm ci run-pattern checks/Integration run test:ci run run e2e:headless Codecov Environment Variables_PUBLIC_SUPABASE_URL project URL_ANON_KEY anonymous key Runtime Full pipeline ~3-5 minutes PRD Fast feedback<2min unit tests",
            "source": "phases/phase-0/TESTING_SETUP.md",
            "line": 15,
            "matched": "deprecated"
          },
          {
            "statement": "handle click events async const onClickMock player id '123 name Doe 'GOLD render<PlayerCard onClick await userEvent.click.getByRole('button expect(onClickMock).toHaveBeenCalledWith'123 E2E Test Cypress/player-flow Management Flow.login('test@example 'password create new player/players.findByRole('button /add player'Jane Smith/tier'GOLD'button /save'Jane Smith.visible created successfully\n\nAnti-Pattern Enforcement Section 4) ESLint Rules Global Anti-Patterns Forbidden Supabase client components client createClient(url console.log production message console.warn.error any type data response test.only CI Service Layer Specific.eslintrc-services.js Forbidden ReturnType Service createPlayerService Forbidden Class-based services PlayerService Default exports createPlayerService named exports Global real-time managers createGlobalManager @deprecated code newFunction deprecated code Lint Commands lint Check files-fix issues\n\nCI Workflow.github/workflows/ci.yml Pipeline Stages `npm ci run-pattern checks/Integration run test:ci run run e2e:headless Codecov Environment Variables_PUBLIC_SUPABASE_URL project URL_ANON_KEY anonymous key Runtime Full pipeline ~3-5 minutes PRD Fast feedback<2min unit tests",
            "source": "phases/phase-0/TESTING_SETUP.md",
            "line": 15,
            "matched": "ReturnType"
          },
          {
            "statement": "Wave Test not implementation tests end-to-end LOW Unit tests 85% coverage manual testing Assign QA team Wave 3\n\nVerification Results Database Schema Run psql docs_2_VERIFICATION_SCRIPTloyalty_ledger columns 0 11 columns (id player_id rating_slip_id visit_id session_id transaction_type event_type points_change reason source created_at loyalty_ledger columns 2) staff_id balance_before tier correlation_id Idempotency unique index_type Correlation ID index (Wave 2) Staff audit index 2) increment_player_loyalty RPC result 11 columns player_id balance_before_after current_balance lifetime_points tier_progress updated_at row_locked RPC row locking Data integrity checks No duplicate session entries CHECKS Code Quality Verification TypeScript Safety PASS (0 errors IDE Diagnostics Check File app/actions/ratingslip.ts array no errors PT-2 Architecture Standards Compliance Functional factories classes Explicit interfaces `ReturnType inference No global singletons factories Single source types No `console.* production code logging No code No type casting\n\nQuality Gates Summary Requirement Status Evidence applies Migration 20251013000001 Returns 9 columns/after PASS Returns 11 columns SQL 6 columns added loyalty_ledger staff_id balance_before/after/after correlation_id 2 indexes created staff_loyalty_ledger_correlation `loyalty:award enforced manualReward action 10 requests/min per staff tests verify enforcement Keys deterministic hash consistency Request-scoped tracking runWithCorrelation( wraps actions No types 0 TypeScript diagnostics errors Test >80% infrastructure 41/41 tests passing Canonical telemetry schema emitTelemetry( uses canonical schema RPC UPDATE Verifiedfunction definition No duplicate session entries Database 0 duplicates QUALITY GATES",
            "source": "phases/phase-6/wave-2/WAVE_2_COMPLETION_SIGNOFF.md",
            "line": 9,
            "matched": "classes"
          },
          {
            "statement": "Wave Test not implementation tests end-to-end LOW Unit tests 85% coverage manual testing Assign QA team Wave 3\n\nVerification Results Database Schema Run psql docs_2_VERIFICATION_SCRIPTloyalty_ledger columns 0 11 columns (id player_id rating_slip_id visit_id session_id transaction_type event_type points_change reason source created_at loyalty_ledger columns 2) staff_id balance_before tier correlation_id Idempotency unique index_type Correlation ID index (Wave 2) Staff audit index 2) increment_player_loyalty RPC result 11 columns player_id balance_before_after current_balance lifetime_points tier_progress updated_at row_locked RPC row locking Data integrity checks No duplicate session entries CHECKS Code Quality Verification TypeScript Safety PASS (0 errors IDE Diagnostics Check File app/actions/ratingslip.ts array no errors PT-2 Architecture Standards Compliance Functional factories classes Explicit interfaces `ReturnType inference No global singletons factories Single source types No `console.* production code logging No code No type casting\n\nQuality Gates Summary Requirement Status Evidence applies Migration 20251013000001 Returns 9 columns/after PASS Returns 11 columns SQL 6 columns added loyalty_ledger staff_id balance_before/after/after correlation_id 2 indexes created staff_loyalty_ledger_correlation `loyalty:award enforced manualReward action 10 requests/min per staff tests verify enforcement Keys deterministic hash consistency Request-scoped tracking runWithCorrelation( wraps actions No types 0 TypeScript diagnostics errors Test >80% infrastructure 41/41 tests passing Canonical telemetry schema emitTelemetry( uses canonical schema RPC UPDATE Verifiedfunction definition No duplicate session entries Database 0 duplicates QUALITY GATES",
            "source": "phases/phase-6/wave-2/WAVE_2_COMPLETION_SIGNOFF.md",
            "line": 9,
            "matched": "ReturnType"
          },
          {
            "statement": "Wave Test not implementation tests end-to-end LOW Unit tests 85% coverage manual testing Assign QA team Wave 3\n\nVerification Results Database Schema Run psql docs_2_VERIFICATION_SCRIPTloyalty_ledger columns 0 11 columns (id player_id rating_slip_id visit_id session_id transaction_type event_type points_change reason source created_at loyalty_ledger columns 2) staff_id balance_before tier correlation_id Idempotency unique index_type Correlation ID index (Wave 2) Staff audit index 2) increment_player_loyalty RPC result 11 columns player_id balance_before_after current_balance lifetime_points tier_progress updated_at row_locked RPC row locking Data integrity checks No duplicate session entries CHECKS Code Quality Verification TypeScript Safety PASS (0 errors IDE Diagnostics Check File app/actions/ratingslip.ts array no errors PT-2 Architecture Standards Compliance Functional factories classes Explicit interfaces `ReturnType inference No global singletons factories Single source types No `console.* production code logging No code No type casting\n\nQuality Gates Summary Requirement Status Evidence applies Migration 20251013000001 Returns 9 columns/after PASS Returns 11 columns SQL 6 columns added loyalty_ledger staff_id balance_before/after/after correlation_id 2 indexes created staff_loyalty_ledger_correlation `loyalty:award enforced manualReward action 10 requests/min per staff tests verify enforcement Keys deterministic hash consistency Request-scoped tracking runWithCorrelation( wraps actions No types 0 TypeScript diagnostics errors Test >80% infrastructure 41/41 tests passing Canonical telemetry schema emitTelemetry( uses canonical schema RPC UPDATE Verifiedfunction definition No duplicate session entries Database 0 duplicates QUALITY GATES",
            "source": "phases/phase-6/wave-2/WAVE_2_COMPLETION_SIGNOFF.md",
            "line": 9,
            "matched": "global"
          },
          {
            "statement": "Wave Test not implementation tests end-to-end LOW Unit tests 85% coverage manual testing Assign QA team Wave 3\n\nVerification Results Database Schema Run psql docs_2_VERIFICATION_SCRIPTloyalty_ledger columns 0 11 columns (id player_id rating_slip_id visit_id session_id transaction_type event_type points_change reason source created_at loyalty_ledger columns 2) staff_id balance_before tier correlation_id Idempotency unique index_type Correlation ID index (Wave 2) Staff audit index 2) increment_player_loyalty RPC result 11 columns player_id balance_before_after current_balance lifetime_points tier_progress updated_at row_locked RPC row locking Data integrity checks No duplicate session entries CHECKS Code Quality Verification TypeScript Safety PASS (0 errors IDE Diagnostics Check File app/actions/ratingslip.ts array no errors PT-2 Architecture Standards Compliance Functional factories classes Explicit interfaces `ReturnType inference No global singletons factories Single source types No `console.* production code logging No code No type casting\n\nQuality Gates Summary Requirement Status Evidence applies Migration 20251013000001 Returns 9 columns/after PASS Returns 11 columns SQL 6 columns added loyalty_ledger staff_id balance_before/after/after correlation_id 2 indexes created staff_loyalty_ledger_correlation `loyalty:award enforced manualReward action 10 requests/min per staff tests verify enforcement Keys deterministic hash consistency Request-scoped tracking runWithCorrelation( wraps actions No types 0 TypeScript diagnostics errors Test >80% infrastructure 41/41 tests passing Canonical telemetry schema emitTelemetry( uses canonical schema RPC UPDATE Verifiedfunction definition No duplicate session entries Database 0 duplicates QUALITY GATES",
            "source": "phases/phase-6/wave-2/WAVE_2_COMPLETION_SIGNOFF.md",
            "line": 9,
            "matched": "singleton"
          },
          {
            "statement": "Rejected Alternatives 4.1 Path B Vertical Slicing Directories HIGH 12 weeks LOW weeks lost Restructuring 7 services reimplements patterns service Loss PlayerService contract tests migrate velocity 4x improvement pain point Services <200 lines services large optimization Service files exceed 500 lines 5 modules service Team size >3 developers Feature independence validated 4.2 Path C Strict Horizontal Layers Structure MEDIUM 10 weeks MEDIUM Solo developer experiment More files 10-person team solo Week 5 Week 2-3 layer boundaries Clean boilerplate solo dev Team size >3 developers Onboarding Layer violations Technical debt\n\nStrategic Technical Debt Speed architects debts 1: Consolidated Service 1 file >500 lines 500 lines 2 hours Inline schemas server not validation reused 3 operations 1 day extract Simple Error String messages not error catalogs >10 error codes 2 days catalog MEDIUM 4: Manual No real-time 5 days LOW 5 No Optimistic Server mutations loading complaints 2 days domain 6 Basic Lists Load records 100 records 1 day domain MEDIUM Deferred ~19 days Time ~22 days days faster deferred 5.2 Non Quality Gates architects Service No ReturnType inference Supabase Consistent error handling Test Source Zero incremental cost high protection value\n\nSuccess Metrics Phase 2 7/7 services 110 tests >80% coverage Zero PRD violations Phase 3 2-6) 3 slices UI E2E <500ms React Query cache >70% Phase 4 7) <1s Zero memory leaks Multi-tab sync Clean subscription lifecycle Production Ready 8) LCP TBT JS Zero warnings Deployment automated Health checks",
            "source": "architecture/slicing/CONSENSUS_SYNTHESIS.md",
            "line": 17,
            "matched": "ReturnType"
          },
          {
            "statement": "YAGNI Principle Architectural Patterns MVP Separate business modules Isolate complex workflows No workflows Visit lifecycle 3 methods 50 lines 2 days 7 days until workflow 200 Separate queries modules Organize complex queries needs list() getById() No JOIN queries MTL CTR 2 days 7 days until 5 complex queries Separate transforms modules Centralize DTO mapping DTOs Pick/Omit database (10 lines PlayerDTO 1 day 7 days until DTO logic exceeds 50 Separate validation modules schemas Validation server actions (20 lines playerCreateSchemaobject email lastName 5 lines 1 day service 7 days schemas 3 Real-time subscriptions scheduler Live multi-user sync Manual refresh MVP-user Casino floor managers work independently no collaborative editing 5 days 2 days domain days user feedback demands real Time Saved ship MVP 4 weeks 15\n\nExplicit interfaces ReturnType Supabase client ServiceResult pattern error handling CRUD operations Player Visit RatingSlip MTL MTL queries CTR threshold detection 4 Server actions error handling ServiceResult revalidatePath cache No complex orchestration 3 React Query hooks create list staleTime 5 minutes custom caching 8 components forms list views pagination Loading states skeletons Error toasts Implementation (3 weeks 1 week buffer weeks\n\nTime-to-Market Optimization Current Trajectory Layering 1-2 Complete Service Add business queries transforms days validationservices (3.5 days Perfect service layer zero UI 3-4 Action Layer Player Visit RatingSlip PlayerFinancial Casino TableContext MTL Complete action layer zero UI 5-7 UI Layer Player Visit RatingSlip PlayerFinancial Casino TableContext MTL Complete UI 7 services 8 Real-Time useSupabaseChannel wrapper Batch invalidation scheduler Domain real-time hooks (3 Real sync 9-10 Testing E2E tests (5 Performance optimization (3 Bug fixes (2 Production-ready MVP Time 10 user-visible feature Week (35 days Delivery 1: Player Management Feature Vertical createPlayerAction updatePlayerAction deletePlayerAction Integration testing polish (8 5 Buffer/documentation (8 hours Working Player CRUD UI",
            "source": "architecture/slicing/analysis/MVP_PRAGMATIC_ANALYSIS.md",
            "line": 11,
            "matched": "ReturnType"
          },
          {
            "statement": "Strategic Technical Debt Acceptance MVP Speed Service File service logic  file >500 lines Reduces navigation overhead 500 lines 2 hours LOW refactor 2: Inline Validation Zod schemas server actions validationSaves 3 days abstraction Schema reused 3 operations 1 day extract schemas LOW Error String not domain catalogs Saves 3 days handling inconsistent>10 codes 2 days build error catalog MEDIUM Basic UI Real Manual refresh Saves 7 days real feedback requests updates 5 days add real-time hooks LOW No Optimistic Server mutations loading UI Saves 3 days state management complaints slowness 2 days add updates enhancement not 6 List Views Pagination Load records no pagination Saves 3 days pagination List queries exceed 100 records 1 day domain add pagination MEDIUM issue data grows\n\nDebt Accepted 19 days future Time Saved 22 Benefit 3 days faster MVP deferred 4.2 Debt Baseline-Negotiable Service ReturnType Maintains type safety refactorability Cost 0 days Supabase Prevents safety erosion Cost 0 days **ServiceResult consistent error handling contracts Essential UI error display Cost 0 days Test coverage Prevents regressions refactoring Cost 2 hours per feature Source Truth database schema Prevents type drift inconsistency Cost 0 days standards incremental protection rewrites\n\nFuture Evolution Hooks Preserve Refactoring Options Write code change not future case 1: Service Interface export interface PlayerService create getById update Future Evolution export interface PlayerService Existing methods create<ServiceResult getById update New methods added incrementally search<ServiceResult activate Add methods interface without changing signatures zero changes 2: Server Actions Thin export async function createPlayerAction await createClient await.create revalidatePath return result Future Evolution export async function createPlayerAction createClient playerService Add orchestration logic await playerService.createTrigger welcome email emailService.sendWelcome(result.data Log audit event auditService.log(_created result.data revalidatePath(/players return result Actions start simple add orchestration workflows no complexity 3: React Query Hooks Abstraction export function useCreatePlayer(.success created Future Evolution Optimistic Updates export function useCreatePlayer( async Optimistic update queryClient.cancelQueries('players.getQueryData.setQueryData Rollback error.setQueryData.invalidateQueries'Player created **Evolution start simple add optimistic updates UI layer isolated change",
            "source": "architecture/slicing/analysis/MVP_PRAGMATIC_ANALYSIS.md",
            "line": 21,
            "matched": "ReturnType"
          }
        ],
        "banned": [
          {
            "statement": "Return error success false Runtime schema mismatches Database constraint violations Service operation failures Unexpected error patterns\n\nAutomated Guardrails Schema Verification Test-verification.test.ts Compile-time verification service DTOs match database schema Table name correctness_case PascalCase Field name alignment Removed field detection Type generation freshness Pre-commit schema changes CI/CD Recommended After migration player_loyalty PlayerLoyaltyRow Database validFields-error old field name compile PlayerLoyaltyRow \"points Type Generation Workflow database migration run db:types/database.types.ts (regenerated Supabase schema[Create Migration[Apply Migration db:types Commit Verification Test Service DTOs Types regenerated after migration no exceptions Service Layer Linting Rules.eslintrc.-restricted-imports Prevent cross-context imports-eslint/no-explicit-any Ban types/explicit-function-return-type Require return types Detect `ReturnType anti-pattern-imports import Use event bus DTOs.\" Migration Safety Checks `supabase/migrations/*.sql Migration files timestamped No data mutations DDL migrations Idempotent operations EXISTS EXISTS Foreign key constraints before deploy-deploy Test migration locally Regenerate types Run schema verification Full test suite Review diff types\n\nEnforcement Mechanisms Matrix Violation Type Layer 1 (IDE 2 (Pre-commit 3 (CI/CD 4 (Runtime) Schema drift Warning Block Monitor Import violations Type errors Test failures Linting violations Formatting Auto-fix Bypass Procedures Schema verification failures Type check failures Critical test failures Bypass with Approval** E2E test failures infrastructure issue Non-critical linting violations-disable Auto-bypass Prettier formatting (auto-fixed on commit",
            "source": "integrity/INTEGRITY_FRAMEWORK.md",
            "line": 11,
            "matched": "anti-pattern"
          },
          {
            "statement": "Return error success false Runtime schema mismatches Database constraint violations Service operation failures Unexpected error patterns\n\nAutomated Guardrails Schema Verification Test-verification.test.ts Compile-time verification service DTOs match database schema Table name correctness_case PascalCase Field name alignment Removed field detection Type generation freshness Pre-commit schema changes CI/CD Recommended After migration player_loyalty PlayerLoyaltyRow Database validFields-error old field name compile PlayerLoyaltyRow \"points Type Generation Workflow database migration run db:types/database.types.ts (regenerated Supabase schema[Create Migration[Apply Migration db:types Commit Verification Test Service DTOs Types regenerated after migration no exceptions Service Layer Linting Rules.eslintrc.-restricted-imports Prevent cross-context imports-eslint/no-explicit-any Ban types/explicit-function-return-type Require return types Detect `ReturnType anti-pattern-imports import Use event bus DTOs.\" Migration Safety Checks `supabase/migrations/*.sql Migration files timestamped No data mutations DDL migrations Idempotent operations EXISTS EXISTS Foreign key constraints before deploy-deploy Test migration locally Regenerate types Run schema verification Full test suite Review diff types\n\nEnforcement Mechanisms Matrix Violation Type Layer 1 (IDE 2 (Pre-commit 3 (CI/CD 4 (Runtime) Schema drift Warning Block Monitor Import violations Type errors Test failures Linting violations Formatting Auto-fix Bypass Procedures Schema verification failures Type check failures Critical test failures Bypass with Approval** E2E test failures infrastructure issue Non-critical linting violations-disable Auto-bypass Prettier formatting (auto-fixed on commit",
            "source": "integrity/INTEGRITY_FRAMEWORK.md",
            "line": 11,
            "matched": "ReturnType"
          },
          {
            "statement": "Anti-Pattern\n\nSupabase client creation stores-store.ts `staleTime 0 unless real-time-slip Block `Database = any manual table redefinitions intersection-based schema rebuilds modules Layer Ban `ReturnType patterns exports-slip Require explicit interface definitions factories Forbid `supabase any parameters factory functions Enforce explicit return type interfaces overwrites Ban duplicate factory patterns Prohibit zero-value wrapper functions creators Ban mixing default named exports named consistency traceability Prohibit runtime validation factory functions move development-only initialization-time checks any type casting bypass incompletemethod interface deprecated class services Delete deprecated code APIs public method type signature No silent additions Ban global real-time managers enforce hook-scoped subscriptions automated tests Ban service-layer factories state creation request-scoped Ban bulk library imports dev console logging Enforce UUID Primary Keys Mixed ID types UUID create technical debt type-unsafe joins ORM friction `ratingslip.id TEXT tables UUID casts key relationships logs UUID zero-cast schema consistency new domain tables use `UUID PRIMARY DEFAULT_random_uuid( Pre-migration schema audits inherited TEXT-based IDs\n\nDeployment Release Management local dev staging production migration seed Supabase storage change dev staging production Run migrations Supabase CLI manual DDL Record diff Release staging pass before promotion Track candidates semantic tags Database connections URLs session mode Configure connection strings environment variables flags wrap risky features kill switches store metadata Supabase LaunchDarkly document rollout steps API compatibility deprecation timelines Rollback scripts restore invalidate caches",
            "source": "system-prd/CANONICAL_BLUEPRINT_MVP_PRD.md",
            "line": 21,
            "matched": "deprecated"
          },
          {
            "statement": "Anti-Pattern\n\nSupabase client creation stores-store.ts `staleTime 0 unless real-time-slip Block `Database = any manual table redefinitions intersection-based schema rebuilds modules Layer Ban `ReturnType patterns exports-slip Require explicit interface definitions factories Forbid `supabase any parameters factory functions Enforce explicit return type interfaces overwrites Ban duplicate factory patterns Prohibit zero-value wrapper functions creators Ban mixing default named exports named consistency traceability Prohibit runtime validation factory functions move development-only initialization-time checks any type casting bypass incompletemethod interface deprecated class services Delete deprecated code APIs public method type signature No silent additions Ban global real-time managers enforce hook-scoped subscriptions automated tests Ban service-layer factories state creation request-scoped Ban bulk library imports dev console logging Enforce UUID Primary Keys Mixed ID types UUID create technical debt type-unsafe joins ORM friction `ratingslip.id TEXT tables UUID casts key relationships logs UUID zero-cast schema consistency new domain tables use `UUID PRIMARY DEFAULT_random_uuid( Pre-migration schema audits inherited TEXT-based IDs\n\nDeployment Release Management local dev staging production migration seed Supabase storage change dev staging production Run migrations Supabase CLI manual DDL Record diff Release staging pass before promotion Track candidates semantic tags Database connections URLs session mode Configure connection strings environment variables flags wrap risky features kill switches store metadata Supabase LaunchDarkly document rollout steps API compatibility deprecation timelines Rollback scripts restore invalidate caches",
            "source": "system-prd/CANONICAL_BLUEPRINT_MVP_PRD.md",
            "line": 21,
            "matched": "deprecated"
          },
          {
            "statement": "Anti-Pattern\n\nSupabase client creation stores-store.ts `staleTime 0 unless real-time-slip Block `Database = any manual table redefinitions intersection-based schema rebuilds modules Layer Ban `ReturnType patterns exports-slip Require explicit interface definitions factories Forbid `supabase any parameters factory functions Enforce explicit return type interfaces overwrites Ban duplicate factory patterns Prohibit zero-value wrapper functions creators Ban mixing default named exports named consistency traceability Prohibit runtime validation factory functions move development-only initialization-time checks any type casting bypass incompletemethod interface deprecated class services Delete deprecated code APIs public method type signature No silent additions Ban global real-time managers enforce hook-scoped subscriptions automated tests Ban service-layer factories state creation request-scoped Ban bulk library imports dev console logging Enforce UUID Primary Keys Mixed ID types UUID create technical debt type-unsafe joins ORM friction `ratingslip.id TEXT tables UUID casts key relationships logs UUID zero-cast schema consistency new domain tables use `UUID PRIMARY DEFAULT_random_uuid( Pre-migration schema audits inherited TEXT-based IDs\n\nDeployment Release Management local dev staging production migration seed Supabase storage change dev staging production Run migrations Supabase CLI manual DDL Record diff Release staging pass before promotion Track candidates semantic tags Database connections URLs session mode Configure connection strings environment variables flags wrap risky features kill switches store metadata Supabase LaunchDarkly document rollout steps API compatibility deprecation timelines Rollback scripts restore invalidate caches",
            "source": "system-prd/CANONICAL_BLUEPRINT_MVP_PRD.md",
            "line": 21,
            "matched": "ReturnType"
          },
          {
            "statement": "Anti-Pattern\n\nSupabase client creation stores-store.ts `staleTime 0 unless real-time-slip Block `Database = any manual table redefinitions intersection-based schema rebuilds modules Layer Ban `ReturnType patterns exports-slip Require explicit interface definitions factories Forbid `supabase any parameters factory functions Enforce explicit return type interfaces overwrites Ban duplicate factory patterns Prohibit zero-value wrapper functions creators Ban mixing default named exports named consistency traceability Prohibit runtime validation factory functions move development-only initialization-time checks any type casting bypass incompletemethod interface deprecated class services Delete deprecated code APIs public method type signature No silent additions Ban global real-time managers enforce hook-scoped subscriptions automated tests Ban service-layer factories state creation request-scoped Ban bulk library imports dev console logging Enforce UUID Primary Keys Mixed ID types UUID create technical debt type-unsafe joins ORM friction `ratingslip.id TEXT tables UUID casts key relationships logs UUID zero-cast schema consistency new domain tables use `UUID PRIMARY DEFAULT_random_uuid( Pre-migration schema audits inherited TEXT-based IDs\n\nDeployment Release Management local dev staging production migration seed Supabase storage change dev staging production Run migrations Supabase CLI manual DDL Record diff Release staging pass before promotion Track candidates semantic tags Database connections URLs session mode Configure connection strings environment variables flags wrap risky features kill switches store metadata Supabase LaunchDarkly document rollout steps API compatibility deprecation timelines Rollback scripts restore invalidate caches",
            "source": "system-prd/CANONICAL_BLUEPRINT_MVP_PRD.md",
            "line": 21,
            "matched": "global"
          },
          {
            "statement": "Service Implementation Reference card day-day [SERVICE_TEMPLATE.md\n\nPre-Flight Checklist service code Never Always `ReturnType createXService `interface XService `supabase SupabaseClient/types/database-rebuilt/x/types/domains/x@deprecated Delete `console.* Structured logging-Violation PT-1 code breaks don't patch\n\nFile Structure __tests__ Root-level tests services {domain shared types.ts ServiceResult ServiceError utils.ts generateRequestId operation-wrapper executeOperation {domain index.ts Factory interface crud.ts operations/services/{domain{domain add `business.ts `queries.ts 3rd occurrence",
            "source": "patterns/SERVICE_TEMPLATE_QUICK.md",
            "line": 3,
            "matched": "deprecated"
          },
          {
            "statement": "Service Implementation Reference card day-day [SERVICE_TEMPLATE.md\n\nPre-Flight Checklist service code Never Always `ReturnType createXService `interface XService `supabase SupabaseClient/types/database-rebuilt/x/types/domains/x@deprecated Delete `console.* Structured logging-Violation PT-1 code breaks don't patch\n\nFile Structure __tests__ Root-level tests services {domain shared types.ts ServiceResult ServiceError utils.ts generateRequestId operation-wrapper executeOperation {domain index.ts Factory interface crud.ts operations/services/{domain{domain add `business.ts `queries.ts 3rd occurrence",
            "source": "patterns/SERVICE_TEMPLATE_QUICK.md",
            "line": 3,
            "matched": "ReturnType"
          }
        ]
      }
    }
  ],
  "redundancy": [],
  "broken_links": [
    {
      "source": "phases/phase-5/PHASE_5_WORKFLOW.md",
      "line": 27,
      "link_text": "cypress/support/commands.ts",
      "target": " **Add Custom Commands**: Create test visit Cypress.Commands.playerId casinoId status mode Generate test visit data Cypress.Commands playerId casinoId checkInDate status mode Quality Gates (6",
      "resolved_path": "/home/diepulp/projects/pt-2/docs-compressed/phases/phase-5/ **Add Custom Commands**: Create test visit Cypress.Commands.playerId casinoId status mode Generate test visit data Cypress.Commands playerId casinoId checkInDate status mode Quality Gates (6",
      "context": "Wave 4: E2E Tests 2.5 hours Full-Stack Developer/e2e previous waves complete Deliverables-management-integration**Test Suites** (minimum 20 tests):\"Visit Management - Integration Tests\",\"Create Workflow\", create new visit validate required fields\", handle player not found casino not found default to ONGOING status UNRATED mode\",\"Read Workflow\", fetch visit by ID\", list visits ordered by check-in filter visits by status\", by search visits by player return empty array when no visits\"Update Workflow\", update visit visit set check-out date (end visit reflect updates in\"Delete Workflow\", delete visit handle FK violation (related rating slips remove from cache after deletion\",\"Complete Lifecycle\", handle full visit lifecycleupdate end async => {\"Performance\", load visit list < 1 async { search visits < async { Validation\", enforce valid status async { mode {\"Error handle invalid player ID { invalid casino ID {\n\n2. [cypress/e2e/visit-management.ts] **E2E Browser Tests** (minimum 15 tests): describe\"Visit Management - E2E\",/visits\"Visit\"displays visits table\"filters by status mode\"searches by player\"shows correct status badges\",\"Create Visit\",\"opens create form\"selects player from casino\"validates required fields\",\"creates visit shows\"Edit Visit\",\"opens edit form\"updates visit\"ends visit (sets check-out date\"Delete Visit\",\"opens confirmation\"cancels deletion\",\"confirms deletion removes from 3. [cypress/support/commands.ts]( **Add Custom Commands**: Create test visit Cypress.Commands.playerId casinoId status mode Generate test visit data Cypress.Commands playerId casinoId checkInDate status mode Quality Gates (6) tests passing (20+ 15+ Cypress Test coverage > 85% domain Performance benchmarks< 1s list < 300ms search No flaky tests (3 consecutive runs pass Test cross-test dependencies Comprehensive error scenario coverage Validation Commands integration tests-management Watch mode Coverage Cypress/e2e/visit-management.cy\n\nParallel Delegation Strategy Agent Coordination Matrix Duration Dependencies Backend Architect 1h Server Actions 1.5h Query Hooks TypeScript Pro 1h 2A (30min Mutation Hooks TypeScript Pro 1.5h UI Components Full-Stack Developer 3.5h E2E Tests Full-Stack Developer 2.5h 3 Execution Timeline 0:00 Wave 1: Service Extensions Architect 1:00 2A Server Actions 3B UI Components 1:30 2B Query Hooks Pro 2:30 3A Mutation Hooks Pro 3B UI hooks 4:00 UI 4:30 4: E2E Tests-Stack Developer 7:00 Elapsed ~7 hours 11h sequential 36% time savings Communication Protocol 2A Wave 2BServer Action Signatures createVisit getVisit searchVisits(query string start Wave 2B (Query Hooks 2A \u2192 3A Server Actions create update delete get list search wrapped JSDoc documentation start Wave 3A (Mutation Hooks 3A \u2192 3B Mutation Hooks"
    }
  ],
  "outdated_refs": [],
  "tech_stack": [
    {
      "tech": "Next.js",
      "version": "unspecified",
      "source": "INDEX.md",
      "context": "l References Supabase Documentation Development [Type Generation-types [RLS Policies-level-security Next.js Documentation [App Router [Server Actions-fetching-actions-mutations Testing Documentation ["
    },
    {
      "tech": "Supabase",
      "version": "unspecified",
      "source": "INDEX.md",
      "context": "ment procedures State management strategy real-time strategy security patterns  External References Supabase Documentation Development [Type Generation-types [RLS Policies-level-security Next.js Docum"
    },
    {
      "tech": "React Query",
      "version": "unspecified",
      "source": "INDEX.md",
      "context": "Clarity Hybrid Architecture Strategy_ARCHITECTURE Test Location Standardization 3 Integration tests React Query infrastructure Server action wrapper Loyalty Service Next 3 Weeks Player Management UI V"
    },
    {
      "tech": "React Query",
      "version": "unspecified",
      "source": "INDEX.md",
      "context": "rchitectural analysis_SUMMARY Roadmap alignment tracking roadmap docs labels Upcoming Documentation React Query server action patterns stores Compliance workflows MTL reporting real patterns Performan"
    },
    {
      "tech": "Supabase",
      "version": "unspecified",
      "source": "workflows/DATABASE_TYPE_WORKFLOW.md",
      "context": "/database createClient export createPlayerService local types getById TypeScript tables local types supabase return data import remote types service layer Database/types/remote/database  Deployment Wo"
    },
    {
      "tech": "Supabase",
      "version": "unspecified",
      "source": "workflows/DATABASE_TYPE_WORKFLOW.md",
      "context": "es new tables/columns Commit remote types types Deploy application Post-Deployment Validation Check Supabase logs migration errors Verify application new schema No type errors queries execute RLS poli"
    },
    {
      "tech": "Supabase",
      "version": "unspecified",
      "source": "workflows/DATABASE_TYPE_WORKFLOW.md",
      "context": "ut Sync TypeScript errors missing tables Service tests \"Table X errors Solution git pull migrations supabase db reset Rebuild DB Regenerate types Verify Remote DB Out Sync Production errors missing co"
    },
    {
      "tech": "Supabase",
      "version": "unspecified",
      "source": "workflows/DATABASE_TYPE_WORKFLOW.md",
      "context": "ify Remote DB Out Sync Production errors missing columns Remote type file match Deployment failures supabase db diff Check missing Apply migrations Update remote types Type Import Errors find import C"
    },
    {
      "tech": "Supabase",
      "version": "unspecified",
      "source": "workflows/DATABASE_TYPE_WORKFLOW.md",
      "context": "ions new migration changes rollback_player_preferences DROP TABLE player_preferences Apply rollback supabase db reset Local supabase db push  Type File Differences Explained Local Types/database.types"
    },
    {
      "tech": "Supabase",
      "version": "unspecified",
      "source": "workflows/DATABASE_TYPE_WORKFLOW.md",
      "context": "es rollback_player_preferences DROP TABLE player_preferences Apply rollback supabase db reset Local supabase db push  Type File Differences Explained Local Types/database.types.ts export type Json /*"
    }
  ],
  "pattern_statements": [
    {
      "statement": "Documentation Casino Tracker V2 Phase 2 Service Layer.5% 2025-10-10 Hybrid Model VERTICAL\n\nQuick Start Developers Type Workflow Daily database management Template 2-page guide Architecture HORIZONTAL VERTICAL decision framework 2 Session implementation status Architects Blueprint MVP PRD spec Layer Architecture Service patterns anti-patterns Production Roadmap 10-week path production hybrid strategy Gaps Missing HORIZONTAL/VERTICAL Contexts_RESPONSIBILITY_MATRIX responsibility matrix\n\nDocumentation System Architecture CANONICAL_BLUEPRINT_PRD SERVICE_LAYER_ARCHITECTURE_DIAGRAM Service patterns diagrams \u00a73.3 Service Layer Standards \u00a74 Anti-Pattern Guardrails Architecture Diagram PT-1 patterns Patterns Templates SERVICE_TEMPLATE BALANCED_ARCHITECTURE_QUICK Hybrid strategy controlled-hybrid-refactor-model TDD PT-1 mining strategy_ARCHITECTURE_QUICK_TEMPLATE migration-hybrid-refactor-model Workflows DATABASE_TYPE_WORKFLOW Local remote DB management Regenerate types Deploy remote Sync local DB MVP_PRODUCTION_ROADMAP 10-week timeline hybrid strategy ARCHITECTURE_GAPS Missing components NEXT_STEPS_REPORTImmediate actions pattern application Phase-phase deliverables HORIZONTAL/VERTICAL rhythm blockers approach Week-by-week hybrid pattern application Architecture Decisions ADR-001-dual-database-strategy Local remote file rationale ADR-002-test-location-standardization Root-level test location standard CONSENSUS_SYNTHESIS Hybrid strategy analysis EVALUATION_FRAMEWORK Decision matrices UPDATE_SUMMARY Roadmap alignment Context problem statement options Decision outcome rationale Compliance PRD Strategy_ARCHITECTURE_QUICK_SYNTHESIS_FRAMEWORK Phase Documentation COMPLETED TESTING_SETUP DATABASE_WORKFLOW Migration workflow implementation security-skeleton RLS JWT Audit setup SESSION_HANDOFFstatus 1 player-vertical-slice TDD controlled-refactor Moved patterns",
      "source": "INDEX.md",
      "line": 3,
      "matched": "anti-pattern"
    },
    {
      "statement": "Key Documents Use Case implement new service[SERVICE_TEMPLATE_QUICK.md Start Service Reference implementation Tests] Test examples[PRD \u00a73.3] Standards write migration[DATABASE_TYPE_WORKFLOW.md Step-step guide Migration basics[ADR-001] Local vs remote strategy understand[BALANCED_ARCHITECTURE_QUICK.md Decision framework[CANONICAL_BLUEPRINT_MVP_PRD.md Complete spec[SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md Visual patterns[MVP_PRODUCTION_ROADMAP.md Implementation plan hybrid strategy check project status[SESSION_HANDOFF.md Current implementation state_PRODUCTION Timeline milestones_GAPS Missing components understand past decision-001-database-type-strategy Dual strategy-test-location-standardization Root-level test location_SYNTHESIS Hybrid strategy rationale Real-time strategy state management architectural decision_ARCHITECTURE_QUICK 4-second rule domain VERTICAL ALL domains HORIZONTAL.\" Check common scenarios Document ADR non-obvious team-impacting\n\nFinding Information Topic Primary Document Supporting Docs **Architecture [BALANCED_ARCHITECTURE_QUICK.md [CONSENSUS_SYNTHESIS.md [EVALUATION_FRAMEWORK.md [SERVICE_TEMPLATE_QUICK.md [PRD \u00a73.3 [Architecture Diagram **Database [DATABASE_TYPE_WORKFLOW.md [ADR-001 [Schema Drift Audit [TESTING_SETUP.md [PRD \u00a73.10 [ADR-002]-location-standardization-Patterns** [PRD \u00a74#4-anti-pattern-guardrails [Architecture Diagram **Roadmap** [MVP_PRODUCTION_ROADMAP.md [ARCHITECTURE_GAPS.md_STEPS_REPORT.md **Migrations** [DATABASE_WORKFLOW.md [DATABASE_TYPE_WORKFLOW.md Phase Status Approach Key Docs **Phase 0** Complete [COMPLETED_SETUP.md **Phase 1**-skeleton.md **Phase 2** 87.5% [SESSION_HANDOFF.md [SERVICE_RESPONSIBILITY_MATRIX.md3** HORIZONTAL VERTICAL Week 3: State mgmt Weeks 4-6 Player/Visit/RatingSlip VERTICAL HYBRID Week 7-8-compliance Pending HORIZONTAL Week 9-10-production-hardening-weeks-9-10\n\nLearning Path Developer Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 Read_BLUEPRINT_MVP_PRD.md \u00a71-4 (30 Review_LAYER_ARCHITECTURE_DIAGRAM.md (15 Study Service Implementation Follow_TYPE_WORKFLOW.md Implement test service_TEMPLATE_QUICK.md (2h ~4 hours Architect/Tech Lead Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 [PRD Review Production Roadmap Analyze [Architecture Gaps Study [ADR-001 Review [Session Handoff (15 Optional [CONSENSUS_SYNTHESIS.mddeep dive hours architectural 3h dive",
      "source": "INDEX.md",
      "line": 13,
      "matched": "anti-pattern"
    },
    {
      "statement": "Document Maintenance Review Schedule [SESSION_HANDOFF.md Updated summary [MVP_PRODUCTION_ROADMAP.md Timeline adjustments_MVP Architecture refinements Document Owners Tech Lead Product Tech Lead Senior Developers DevOps Developers Architecture Team\n\nNeed Help Common Questions HORIZONTAL or [BALANCED_ARCHITECTURE_QUICK.md type file [DATABASE_TYPE_WORKFLOW.md write [SERVICE_TEMPLATE_QUICK.md anti-pattern [PRD \u00a74 MVP [MVP_PRODUCTION_ROADMAP.md 6. [SESSION_HANDOFF.md Document Not Found? Check wrong phase folder Renamed Not created parent project 1.2.0 2025-10-10 Development Team Hybrid Model (HORIZONTAL + VERTICAL)\n\nUpdates (v1.2.0 2025-10-10) Hybrid Architecture Strategy_ARCHITECTURE_QUICK.md 10-min decision guide_SYNTHESIS.md docs HORIZONTAL/VERTICAL labels layers vertical feature delivery MTL Service 2 87.5%/mtl transactions regulatory CTR compliance queries 98 tests Test Location Standardization-level/services Casino TableContext MTL tests services pattern Updates (v1.1.0) Schema Consistency PlayerFinancialService cases Bounded Context Clarity Responsibility Matrix",
      "source": "INDEX.md",
      "line": 23,
      "matched": "anti-pattern"
    },
    {
      "statement": "Phase 2 3) Completed MTL Service Day 6 cash transactions regulatory services/mtl index MTLService crud operations queries Compliance queries CTR aggregation19/19 tests create getById update delete listByGamingDay filtering $10k threshold history compliance aggregation CTR threshold $10,000 patron Gaming day Date-based filtering Direction cash_in_out Area pit cage slot poker kiosk sportsbook Tender types cash cashier_check tito money_order chips ~2 hours compliance query Priority Loyalty Service 1 Day Medium-High compliance 6-8 hours Priority 2: Search Query Pattern Mining 2 Days Apply PT-1 patterns 6 services advanced search/query Multi-word search relevance scoringJOIN patterns active queries~8.75h adapt-Specific Player Service Search/Queries Multi-word search name email phone Relevance scoring getActivePlayers getPlayersByTier Visit Service Search/Queries Search Date range filtering Player name search Casino location getActiveVisits getVisitsByDateRange getVisitsByCasino getPlayerVisitHistory RatingSlip Service Search/Queries Table search Player search Date range\n\nQuery operations getActiveRatingSlips<ServiceResult<RatingSlipDTO getRatingSlipsByTable(tableId getRatingSlipsByPlayer(playerId calculatePlayerPoints dateRange Casino Service Search/Queries searchCasinos searchTables(casinoId<GamingTableDTO getActiveCasinos getFloorStatus(casinoId getTableUtilization TableContext Service Search/Queries getActiveTablesWithSettings(casinoId getTablesByGameType getSettingsChangeHistory(tableId dateRange MTL Service Search/Queries searchTransactions<ServiceResult Transaction Query getCTRCandidates(gamingDay<ServiceResult<MTLEntryDTOgetPatronDailyTotals gamingDay<ServiceResult getTransactionsByArea dateRange search Player Visit RatingSlip Casino TableContext MTL Add 3-5 tests per service 16 hours Priority 3: Integration Testing Audit 1 Day Cross-service FK integrity Cascade operations Point calculation Multi workflows MTL logging-of-Phase-2 services explicit interfaces `SupabaseClient Zero PRD violations Test coverage >80% location consistency Bounded context integrity Responsibility Documentation complete 6-8 hours\n\nPhase 2 7/8 post-MVP Player (8 Visit (10 RatingSlip PlayerFinancial (16 Casino (13 TableContext (22 MTL 15/Query 6 services ~94 4x improvement Zero PRD violations",
      "source": "adr/NEXT_STEPS_REPORT.md",
      "line": 7,
      "matched": "explicit interfaces"
    },
    {
      "statement": "Subscription Architecture-Scoped context owns Supabase channel namespace.available Channels subscribe Postgres changes filtered table schema row-level filters channels duplicate sockets call `acquireChannel receive ref-counted subscription object `releaseChannel( cleanup Payload accept payload mappers typed DTOs React Query callbacks data contracts consistent DTOs Event Processing Cache Updates hooks enqueue cache micro scheduler coalesces events executes single invalidation/update batch Cache payloads entity snapshots call `queryClient.setQueryData Invalidation scheduler exposes helpers `setDetail `mergeList operationspayloads partial scope ambiguous hooks schedule `invalidateQueries calls helpers map Supabase topics query keys hard-code strings Invalidations bypass scheduler low-frequency events default batched thrashing Memory Leak Prevention\n\n-counted `acquireChannel increments counter cleanup decrements invokes.unsubscribe( zero `useRealtimeSubscription hook wraps Supabase listeners cleanup registers `AbortController signalled unmount short-circuit scheduler tasks registry tracks last-activity timestamps idle channels sockets simulate mount/unmount channel counts zero scheduler queues flush Cypress smoke realtime warnings Domain-Specific Shared Channels-Specific domain hook filters payload transforms cache wiring concerns matches React domain-based query keys Utility Cross-domain workflows listen originating domain schedule invalidations( global \u201ceverything\u201d channel payload over-fetching data Reconnection Resilience Status registry listens Supabase eventstransitions `CONNECTED replays tasks triggers refetch resync Supabase handle retries cap 5 reconnections prevents infinite networks document visibility hidden >2 minutes pause scheduler execution visibility flush queue React `refetchOnReconnect missed Refresh Supabase SSR helper rotates session tokens registry exposes `refreshAuth(token) updates without\n\nDeveloper Workflow Testing-channel exports template accepts callbacks folders query keys scheduler operations Domain READMEs list realtime hooks channel names cache impact invalidations ADR-003 overrides `setQueryData invalidation builds channel events_REALTIME silent logging optional metrics custom events",
      "source": "adr/ADR-004-real-time-strategy.md",
      "line": 7,
      "matched": "global"
    },
    {
      "statement": ".success revalidatePath/players data error success Service Layer Business logic services/player/crud createPlayerCrudService async<ServiceResult executeOperation<PlayerDTO data error await supabase email firstName lastName'id email lastName.code '23505 'DUPLICATE_EMAIL exists return player Data Layer PostgreSQL execution RLS policy enforced Constraint check unique Trigger log successful Error Handling Data Layer PostgreSQL constraint violation constraint email code 23505) Service Layer domain error.code 'DUPLICATE_EMAIL player email exists error ServiceResult data null error 'DUPLICATE_EMAIL success false status 400 Action Layer Pass await playerServicecreate add action-level logging return result UI Layer User display mutate error useCreatePlayer 'DUPLICATE_EMAIL registered different.setError exists\n\nTrade-offs Risk Assessment Architecture Trade-offs Advantages Disadvantages Mitigation-Up Stable foundation Testable layers Clear dependencies UI delivery over-engineering Vertical slicing MVP-first schema Layer Clean architecture Maintainable boilerplate Slower development Code-Layer Defense UX Security Duplicate validation Maintenance burden Shared Zod schemas Single source Consistent errors Type-safe Trackable Verbose return types Wrapper overhead Helper functions Type inference Risk Matrix Mitigation 3rd use case Review shared code boundary ESLint rules Code review checklist Architecture tests Enforce client orchestration Document anti-pattern errorShared Standard ServiceResult 4x critical paths Pyramid distribution Integration tests-time sync Scheduler batching Centralized invalidation E2E tests\n\n9. Recommendations Next Steps Immediate Actions 1) Layer Create/LAYER_CONTRACTS.md interfaces Document DTO transformation patterns Establish ServiceResult error code catalog Service Casino Service Data Tests TableContext MTL Implement consistency Create shared cache invalidation helpers validation schema patterns Medium-Term Actions 2-4 Vertical UI Layers Player Management Actions UI E2E Visit Tracking E2E Rating Slip Creation E2E integration test database Implement Cypress E2E test suite Create test data factories/fixtures-Time hook pattern Implement invalidation scheduler Test multi-tab synchronization 9.3 Long-Term Actions (Month 2+) Extract common query patterns shared `queriesDTO transformation utilities Create business workflow templates Implement updates low-latency Add offline-first capabilities Build cross-domain aggregations coding standards layer violation tools Establish architecture review process",
      "source": "architecture/FEATURE_BASED_HORIZONTAL_LAYERING_ANALYSIS.md",
      "line": 31,
      "matched": "anti-pattern"
    },
    {
      "statement": "SERVICE LAYER INTEGRATION TESTS Supabase Test DB/player-integration.test supabase createClient_URL playerService result await playerService.create Verify data database ACTION LAYER Mock Service Layer-action createPlayerService success result await createPlayerAction 4. UI LAYER Server Actions React Query/player-form.test-action createPlayerActionsuccess mockPlayer Test UI interactions Coverage Targets Critical Paths Migrations 100% constraints policies triggers CRUD 90% error validation Business 85% Workflow transitions Queries 80% Complex joins filters Transforms 100% DTO mappings Validation 100% schema constraints Server Actions 80% Orchestration cache invalidation auth Components 70% User interactions conditional rendering User Flows 100% critical paths CRUD operations session lifecycle\n\nReal-Time Subscription Strategy 6.1 Layer Placement Real-time subscriptions not Service Layer Real-time UI concern display Subscriptions require React lifecycle cleanup Service layer pure stateless Services manage WebSocket connections-Pattern Global real manager service layer RealtimeManager instance RealtimeManager connections Map RealtimeChannel void Global state singleton pattern breaks service purity Pattern Domain-specific hook UI layer-players-realtime usePlayersRealtime( queryClient supabase channel supabase-changes Batch invalidation scheduler pattern scheduleInvalidation queryClient.invalidateQueries.unsubscribe 6.2 Real-Time Integration Points UI Supabase DB RQ UI Hook Supabase-time event Supabase#fce4ec#880e4f#e8f5e9#1b5e20 A creates player PostgreSQL event Supabase broadcasts subscribed clients UI B receives invalidation React Query refetches data UI B re-renders new player\n\nImplementation Guidance 7.1 Feature Development Workflow Implement Management feature Step Data Layer 1 Morning supabase/migrations_player.sql CREATE TABLE player UUID_random_uuid email NULL NULL NULL created DEFAULT ALTER TABLE player ENABLE ROW LEVEL SECURITY CREATE POLICY viewable authenticated users SELECT authenticated Commands supabase migration create_player supabase db npm gen:types Service Layer 1 Afternoon 2) services/index workflows.test npm test Action Layer 3 Morning/actions/player/create-player-action-player-action-player.test npm test Step 4: UI Layer (Day 3 Afternoon Day 4) Files-players Query-create-player-realtime sync-list-form/page.tsx Tests-list.test-management npm test Step 5 Integration Demo (Day 4 - Afternoon npm run /players Create update delete players Real-time sync tabs RLS policies Test coverage report 7.2 Cross-Layer Communication Examples Creating Player UI Layer User submits form components/player-form.tsx useCreatePlayer handleSubmit UI Hook React Query mutation-create-player.ts useCreatePlayer(invalidateQueries created Action Layer Server action orchestration async createPlayerAction supabase createServerClient playerService result await.create email firstName lastName",
      "source": "architecture/FEATURE_BASED_HORIZONTAL_LAYERING_ANALYSIS.md",
      "line": 25,
      "matched": "singleton"
    },
    {
      "statement": "Return error success false Runtime schema mismatches Database constraint violations Service operation failures Unexpected error patterns\n\nAutomated Guardrails Schema Verification Test-verification.test.ts Compile-time verification service DTOs match database schema Table name correctness_case PascalCase Field name alignment Removed field detection Type generation freshness Pre-commit schema changes CI/CD Recommended After migration player_loyalty PlayerLoyaltyRow Database validFields-error old field name compile PlayerLoyaltyRow \"points Type Generation Workflow database migration run db:types/database.types.ts (regenerated Supabase schema[Create Migration[Apply Migration db:types Commit Verification Test Service DTOs Types regenerated after migration no exceptions Service Layer Linting Rules.eslintrc.-restricted-imports Prevent cross-context imports-eslint/no-explicit-any Ban types/explicit-function-return-type Require return types Detect `ReturnType anti-pattern-imports import Use event bus DTOs.\" Migration Safety Checks `supabase/migrations/*.sql Migration files timestamped No data mutations DDL migrations Idempotent operations EXISTS EXISTS Foreign key constraints before deploy-deploy Test migration locally Regenerate types Run schema verification Full test suite Review diff types\n\nEnforcement Mechanisms Matrix Violation Type Layer 1 (IDE 2 (Pre-commit 3 (CI/CD 4 (Runtime) Schema drift Warning Block Monitor Import violations Type errors Test failures Linting violations Formatting Auto-fix Bypass Procedures Schema verification failures Type check failures Critical test failures Bypass with Approval** E2E test failures infrastructure issue Non-critical linting violations-disable Auto-bypass Prettier formatting (auto-fixed on commit",
      "source": "integrity/INTEGRITY_FRAMEWORK.md",
      "line": 11,
      "matched": "anti-pattern"
    },
    {
      "statement": "Return error success false Runtime schema mismatches Database constraint violations Service operation failures Unexpected error patterns\n\nAutomated Guardrails Schema Verification Test-verification.test.ts Compile-time verification service DTOs match database schema Table name correctness_case PascalCase Field name alignment Removed field detection Type generation freshness Pre-commit schema changes CI/CD Recommended After migration player_loyalty PlayerLoyaltyRow Database validFields-error old field name compile PlayerLoyaltyRow \"points Type Generation Workflow database migration run db:types/database.types.ts (regenerated Supabase schema[Create Migration[Apply Migration db:types Commit Verification Test Service DTOs Types regenerated after migration no exceptions Service Layer Linting Rules.eslintrc.-restricted-imports Prevent cross-context imports-eslint/no-explicit-any Ban types/explicit-function-return-type Require return types Detect `ReturnType anti-pattern-imports import Use event bus DTOs.\" Migration Safety Checks `supabase/migrations/*.sql Migration files timestamped No data mutations DDL migrations Idempotent operations EXISTS EXISTS Foreign key constraints before deploy-deploy Test migration locally Regenerate types Run schema verification Full test suite Review diff types\n\nEnforcement Mechanisms Matrix Violation Type Layer 1 (IDE 2 (Pre-commit 3 (CI/CD 4 (Runtime) Schema drift Warning Block Monitor Import violations Type errors Test failures Linting violations Formatting Auto-fix Bypass Procedures Schema verification failures Type check failures Critical test failures Bypass with Approval** E2E test failures infrastructure issue Non-critical linting violations-disable Auto-bypass Prettier formatting (auto-fixed on commit",
      "source": "integrity/INTEGRITY_FRAMEWORK.md",
      "line": 11,
      "matched": "ReturnType"
    },
    {
      "statement": "-layer integrity drift violations catches 99% violations before production minimal friction\n\nFour-Layer Defense System Layer 1: IDE Editor-time TypeScript ESLint Prettier caught Layer 2: Pre-commit Hooks-time Schema verification lint-staged caught Layer 3: CI/CD Pipeline-time Mandatory schema verification (4% caught Layer 4: Runtime Guards Operation wrappers monitoring caught Defense layer catches violation classes Automated Guardrails Schema Verification Test-verificationCompile-time verification database schema alignment Tables fields types naming conventions seconds 100% schema drift caught compile Pre-commit Hook-commit Selective types CRUD files Blocks commit schema verification fails 0 to 3-5 seconds error messages fix instructions CI/CD Integration.github/workflows/ci.yml Schema Verification type check before tests ~10 seconds Blocks merge diagnostic output Comprehensive Documentation_FRAMEWORK technical guide_REFERENCE workflows-005 Architectural decision Tech leads architects Updated standards AI assistants engineers\n\nProblem Prevented Developer Commits passes Deploys Runtime failure Hours days after cost High outage lost confidence IDE warns Pre-commit blocks fixes Commits Success Seconds minutes cost Minimal Impact Zero repository-World Example Wave 1 Loyalty Service schema mismatch PascalCase tables obsolete field names failed Detection Wave 2 hours debugging Schema verification mismatch TypeScript compiler mismatches Pre-commit blocks commit fixes minutes Zero production",
      "source": "integrity/IMPLEMENTATION_SUMMARY.md",
      "line": 5,
      "matched": "classes"
    },
    {
      "statement": "Lessons Learned Detection pre audits Mixed ID types Inconsistent Non-standard constraint patterns Prevention UUID ESLint rule keys migrations changes ID justification Nascent domain production data API Near zero test fixtures 2 hours migration verification\n\nRecommendations 2) anti-pattern PRD Update INDEX.md Audit tables 3) schema linting rules UUID consistency pipeline ID schema drift pre-production schema audit type consistency checks deployment gates\n\nReferences [20251006234000_migrate_ratingslip_id_uuid.sql/migrations [CANONICAL_BLUEPRINT_MVP_PRD.md \u00a74-guardrails_RESPONSIBILITY_MATRIX.md Drift_DRIFT_AUDIT.md Closed Schema consistency achieved Phase 3 layer implementation Backend Architecture Team",
      "source": "audits/SCHEMA_CONSISTENCY_RESOLUTION.md",
      "line": 19,
      "matched": "anti-pattern"
    },
    {
      "statement": "Team Structure agents 100% pass zero rework 36-47% time savings parallelization Recommended Team 6-8 Architecture code review PRD compliance Full-Stack implementation Test automation compliance validation CI deployment monitoring 8) Optional UI components Bundle optimization\n\nHybrid Architecture Model_ARCHITECTURE Phase 3 VERTICAL Phases 4-5 Visit independent deployable user-facing Phase 7 workflows-domain Phase HORIZONTAL service layer 7 services state management Phases 4-5 VERTICAL UI 8 HORIZONTAL hardening security deployment Quality anti-pattern checks TypeScript mode Test coverage >80% >90% 4-5 HORIZONTAL VERTICAL categorization First-time quality rework 4-5 Documentation Requirements ADR-003 State Management Strategy completion 3-5 test API documentation\n\nActions Week Replace data Visit UI live hooks Cypress browser E2E tests Phases 4-5 Test workflows dev environment Phase RatingSlip Next Week 6 Wave Extend RatingSlip search Server actions query hooks Mutation hooks UI components E2E tests 2025-11-02) UI Transaction compliance dashboard Visit MTL RatingSlip CTR detection audit trails 6 Completion",
      "source": "roadmap/MVP_PRODUCTION_ROADMAP.md",
      "line": 35,
      "matched": "anti-pattern"
    },
    {
      "statement": "Gap Analysis State Management Layer COMPLETE 3) 100% implemented validated/query-client React Query config (4 tests-action-wrapper wrapper (13 tests-query Mutation Global UI (9 UI (11 6 (3 3 6 69 tests success rate 32 quality gates integration tests 6 services ADR-003 finalized React Query defaults staleTime refetchOnWindowFocus Query key pattern (30 Mutations invalidateQueries/setQueryData (3 ephemeral UI state Server Actions Layer 75% COMPLETE (Phases 3-6 Wave 2) Wrapper infrastructure Player Visit RatingSlip Loyalty/actions-action-wrapper wrapper (13 tests-actions 6 2 6/loyalty-actionsaction 6 Wave 2) PENDING 6 Wave 3) 6 Wave 2 closure Loyalty accrual recovery partial completions Staff loyalty rewards rate limiting Comprehensive error handling 23503 Structured telemetry Cache invalidation Zero console production mutations server Structured telemetry Cache invalidation Production-ready error handling RatingSlip actions 1 ~1.5h MTL actions~2h\n\nUI Component Layer 40% COMPLETE 4-5 2 5 domains complete pattern/players/player-list search (6.4KB-form (7.7KB-detail view (4.8KB-delete-dialog Confirmation (6.1KB/visit-list Table filters-form Create-detail view-delete-dialogConfirmation PENDING 6-context 7 100% quality gates Phases 4-5 WCAG 2.1 AA accessibility compliance Loading states Form validation tracking FK violation React 19 Server Components data fetching Client Components DTO props react-hook-form validation components RatingSlip UI MTL UI compliance dashboard Table Context UI Real-Time Infrastructure DEFERRED 7) deferred 7 No real-time features hooks-channel wrapper subscriptions/invalidation-scheduler Batch invalidation channel subscriptions Cleanup unmount memory leaks React Query invalidations Domain-specific hooks global managers-context scheduler Real-time features deferred Phase 7 prioritize CRUD features2-3 days real-time infrastructure E2E Testing Infrastructure COMPLETE (Phases 4-5 Comprehensive testing framework validated Test/player-management-integration 22 passing 0.828s-management 18-management 26 passing 20/services-smoke 32 tests 3)/ratingslip-management-integration PENDING (Phase 6)/ratingslip-management PENDING\n\n48 integration tests success 38 Cypress browser tests Performance benchmarks List <1s Search <300ms Comprehensive error Test Create (5 Read Update Delete (3 Complete lifecycle Performance (2 Data validation Error handling (2 Loyalty unit tests (41/41 Phase 6 Wave 2 Integration (8 Phase 6 Wave 3 RatingSlip E2E tests Performance Infrastructure PENDING 8)/performance-config-analyzer Size tracking monitoring LCP \u2264 2.5s TBT \u2264 200ms Initial JS \u2264 250KB Automated Lighthouse Performance optimization deferred Phase 8 measurements acceptable performance<1s 3-4 days performance hardening Observability Logging 8) Basic logging production monitoring pending8) Structured logging-value No console Domain metrics API boundary events error handling Production observability deferred Phase 8. 2-3 days logging Security Hardening PARTIAL RLS skeleton hardening pending",
      "source": "roadmap/ARCHITECTURE_GAPS.md",
      "line": 11,
      "matched": "global"
    },
    {
      "statement": "Data Flow Diagrams Creating Complete Session Performance Finances Client Create Player PlayerService Returns player_id Create Visit (player_id + casino_id VisitService Returns visit_id 3a. Create 3b. Create RatingSlip Financial Tx RatingSlipSvc PlayerFinancialSvc (Performance) (Money tracking) average_bet cash_in points chips_brought time_played chips_taken Aggregated Session Report Performance metrics Financial summary Visit details Cross-Service Query Pattern \"Get player's session summary Client Layer async function getSessionSummary(visitId Get visit details await visitService.getById Get all rating slips visit await Promise.allgetByVisitId Performance playerFinancialService Money Aggregate client/action layer visit performance totalPoints sum(ratingSlips avgBet totalTime.accumulated_seconds financials totalCashIn totalChipsOut.chips_taken netChange calculate Aggregation/action NOT services\n\nAnti-Patterns Avoid Cross-Domain Ownership RatingSlip financial data interface average_bet Performance cash_in Finance domain chips_taken Clear separation interface average_bet Performance cash_in Finance chips Service-to-Service Direct Calls Services calling other RatingSlipService async create(data Service calling service financial Client/action orchestrates async function createSession orchestrates services ratingSlip financial Shared Mutable State Services sharing state globalSessionCache Global state class RatingSlipService create globalSessionCache(data.visitId Mutation Immutable isolated state class RatingSlipService No shared state functions async create\n\nMigration Strategy Phase 1: Current State Player Visit RatingSlip services implemented simplified financial fields contexts clarified Phase 2: PlayerFinancialService Create/player-financial module TABLE player_financial_transaction player cash_in chips_brought transaction_type 'DEPOSIT 'EXCHANGE reconciliation_status 'RECONCILED Implement CRUD Add query methods Phase 3: Integration Update client actions services queries finance UI separate performance financial metrics",
      "source": "archive/SERVICE_RESPONSIBILITY_MATRIX_v1.0_pre-loyalty_2025-10-06.md",
      "line": 13,
      "matched": "global"
    },
    {
      "statement": "Data Flow Diagrams Creating Complete Session Performance Finances Client Create Player PlayerService Returns player_id Create Visit (player_id + casino_id VisitService Returns visit_id 3a. Create 3b. Create RatingSlip Financial Tx RatingSlipSvc PlayerFinancialSvc (Performance) (Money tracking) average_bet cash_in points chips_brought time_played chips_taken Aggregated Session Report Performance metrics Financial summary Visit details Cross-Service Query Pattern \"Get player's session summary Client Layer async function getSessionSummary(visitId Get visit details await visitService.getById Get all rating slips visit await Promise.allgetByVisitId Performance playerFinancialService Money Aggregate client/action layer visit performance totalPoints sum(ratingSlips avgBet totalTime.accumulated_seconds financials totalCashIn totalChipsOut.chips_taken netChange calculate Aggregation/action NOT services\n\nAnti-Patterns Avoid Cross-Domain Ownership RatingSlip financial data interface average_bet Performance cash_in Finance domain chips_taken Clear separation interface average_bet Performance cash_in Finance chips Service-to-Service Direct Calls Services calling other RatingSlipService async create(data Service calling service financial Client/action orchestrates async function createSession orchestrates services ratingSlip financial Shared Mutable State Services sharing state globalSessionCache Global state class RatingSlipService create globalSessionCache(data.visitId Mutation Immutable isolated state class RatingSlipService No shared state functions async create\n\nMigration Strategy Phase 1: Current State Player Visit RatingSlip services implemented simplified financial fields contexts clarified Phase 2: PlayerFinancialService Create/player-financial module TABLE player_financial_transaction player cash_in chips_brought transaction_type 'DEPOSIT 'EXCHANGE reconciliation_status 'RECONCILED Implement CRUD Add query methods Phase 3: Integration Update client actions services queries finance UI separate performance financial metrics",
      "source": "archive/SERVICE_RESPONSIBILITY_MATRIX_v1.0_pre-loyalty_2025-10-06.md",
      "line": 13,
      "matched": "global"
    },
    {
      "statement": "Architecture Gap 2025-10-07 Phase 2 Layer 75% (6/8 components\n\nGap Summary Implemented Foundation explicit interfaces (6/8 complete Player Visit RatingSlip PlayerFinancial Casino TableContext MTL Loyalty post-MVP **Shared-wrapper types utils **Database RLS UUID consistency **JWT audit logging skeleton/CD** quality gates **Testing (Jest Cypress 79 tests passing-pattern (ESLint pre hooks location (ADR-002) Root-level/services context Service Responsibility Matrix **Template velocity** 4x improvement validated (89min Missing Critical Components Status React Query setup Phase 3 stores Server actions layer Domain components Channel wrapper hooks Invalidation scheduler Bundle optimization Query optimization RLS policy completion Phase 4 ComplianceStructured logging Missing Phase 5 Launch Migration automation Missing\n\nGap Analysis State Management Layer 3 Blocker Services exist no consumption lib query-client.ts React Query config hooks use-service-query.ts Query wrapper template player use-player-queries-player-mutations mutations ratingslip-queries player-store UI state visit-store.ts Modal/nav state React Query defaults `staleTime 0 `refetchOnWindowFocus false Query key pattern Mutations `invalidateQueries `setQueryData restricted ephemeral UI state server data UI layer blocked infrastructure exists Server Actions Layer 3 Blocker Minimal server actions-create only lib/actions-server-action-wrapper.ts Action wrapper player create-player-action update-player-action.ts get-player-actionsearch-players-action start-visit-action end cancel-visit-action create-rating-action update-rating-action mutations server actions Structured telemetry error codes Cache invalidation No console Data fetching/mutations blocked Real-Time Infrastructure 3 Critical No hooks use-supabase-channel Channel wrapper Domain subscriptions invalidation-scheduler Batch invalidation `useSupabaseChannel wrapper Cleanup unmount memory leaks Batch Query invalidations scheduler Domain-specific hooks global managers/table-context/useTableContextRealtime scheduler pattern Real-time updates non-functional UI Component Layer 3 Blocker Minimal UI-form",
      "source": "archive/ARCHITECTURE_GAPS_2025-10-07.md",
      "line": 3,
      "matched": "explicit interfaces"
    },
    {
      "statement": "Gap Summary Implemented Foundation explicit interfaces (6/8 complete Player Visit RatingSlip PlayerFinancial Casino TableContext MTL Loyalty post-MVP **Shared-wrapper types utils **Database RLS UUID consistency **JWT audit logging skeleton/CD** quality gates **Testing (Jest Cypress 79 tests passing-pattern (ESLint pre hooks location (ADR-002) Root-level/services context Service Responsibility Matrix **Template velocity** 4x improvement validated (89min Missing Critical Components Status React Query setup Phase 3 stores Server actions layer Domain components Channel wrapper hooks Invalidation scheduler Bundle optimization Query optimization RLS policy completion Phase 4 ComplianceStructured logging Missing Phase 5 Launch Migration automation Missing\n\nGap Analysis State Management Layer 3 Blocker Services exist no consumption lib query-client.ts React Query config hooks use-service-query.ts Query wrapper template player use-player-queries-player-mutations mutations ratingslip-queries player-store UI state visit-store.ts Modal/nav state React Query defaults `staleTime 0 `refetchOnWindowFocus false Query key pattern Mutations `invalidateQueries `setQueryData restricted ephemeral UI state server data UI layer blocked infrastructure exists Server Actions Layer 3 Blocker Minimal server actions-create only lib/actions-server-action-wrapper.ts Action wrapper player create-player-action update-player-action.ts get-player-actionsearch-players-action start-visit-action end cancel-visit-action create-rating-action update-rating-action mutations server actions Structured telemetry error codes Cache invalidation No console Data fetching/mutations blocked Real-Time Infrastructure 3 Critical No hooks use-supabase-channel Channel wrapper Domain subscriptions invalidation-scheduler Batch invalidation `useSupabaseChannel wrapper Cleanup unmount memory leaks Batch Query invalidations scheduler Domain-specific hooks global managers/table-context/useTableContextRealtime scheduler pattern Real-time updates non-functional UI Component Layer 3 Blocker Minimal UI-form\n\nDomain Components** player player-form.tsx needed player-list.tsx player-detail-search visit-form.tsx-list-detail ratingslip rating-form rating-list-detail casino table-manager.tsx transaction-form compliance-dashboard.tsx Requirements** Server Components data fetching Client Components accept DTO props Dynamic imports heavy components HeroUI/Radix imports No user-facing functionality Performance Infrastructure (Phase 5 Blocker No performance monitoring Components** lib/performance lighthouse-config.ts Budget enforcement bundle-analyzer Size tracking performance Lighthouse CI next.configmjs Bundle analysis LCP 2.5s TBT 200ms Initial JS 250KB Automated Lighthouse CI Performance budgets enforced Observability Logging 5 No structured logging lib/logging logger logger telemetry Metrics collection instrumentation Next.js Structured logging/key-value No console Domain metrics API boundary Alertable events failures Production debugging Security Hardening 4-5 RLS skeleton Policies Player/tests rls-policies.test Policy verification rate-limiting cors-config Least-privilege RLS policies JWT claim validation Audit logging critical actions Zero security advisor warnings Production security compromised",
      "source": "archive/ARCHITECTURE_GAPS_2025-10-07.md",
      "line": 5,
      "matched": "global"
    },
    {
      "statement": "Canonical Service\n\nService Layer Blueprint PT-2 captures service patterns PT-1 anti-patterns Type System Anti-Patterns `ReturnType createXService inference parameters safety Incomplete interfaces casting Object spread without type guards Architectural Anti-Patterns Dual rating-slip Class-based service abstractions Over-engineered ServiceFactory caching class wrappers services Duplicate factory patterns Global state management Global real managers Export/Module Anti-Patterns Mixed default named exports Zero-value wrapper functions Runtime validation factory functions Player Visit Rating Slip Casino MTL Compliance Table Context services PT-1 Client Layer Service Orchestration Core Domain Services Service Module CompositionRY Queries TRN Mapping VAL Module Checks Shared Service Infrastructure Handling SR DTO DTOs VAL Schemas Data Layer SB Client DB Enabled RT-time Connections Client Service UI Hooks SF Actions Service Factory Pattern PS VS RS CS TC MS NS CPS Module Composition Service PS CRUD QRY TRN TRN CRUD BUS QRY TRN\n\nCS CRUD QRY TRN VAL CRUD QRY TRN VAL CRUD QRY TRN VAL Shared Infrastructure Usage CRUD QRY SR TRN DTO VAL_SCH Data Layer Connections CRUD QRY DB RT service#e1f5fe#01579b module#f3e5f5#4a148c#fff3e0 data#e8f5e9#1b5e20 client#fce4ec#880e4f orchestration#f0f4c3#33691e PS CRUD_SCH SB UI SF orchestration",
      "source": "system-prd/SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md",
      "line": 3,
      "matched": "anti-pattern"
    },
    {
      "statement": "Canonical Service\n\nService Layer Blueprint PT-2 captures service patterns PT-1 anti-patterns Type System Anti-Patterns `ReturnType createXService inference parameters safety Incomplete interfaces casting Object spread without type guards Architectural Anti-Patterns Dual rating-slip Class-based service abstractions Over-engineered ServiceFactory caching class wrappers services Duplicate factory patterns Global state management Global real managers Export/Module Anti-Patterns Mixed default named exports Zero-value wrapper functions Runtime validation factory functions Player Visit Rating Slip Casino MTL Compliance Table Context services PT-1 Client Layer Service Orchestration Core Domain Services Service Module CompositionRY Queries TRN Mapping VAL Module Checks Shared Service Infrastructure Handling SR DTO DTOs VAL Schemas Data Layer SB Client DB Enabled RT-time Connections Client Service UI Hooks SF Actions Service Factory Pattern PS VS RS CS TC MS NS CPS Module Composition Service PS CRUD QRY TRN TRN CRUD BUS QRY TRN\n\nCS CRUD QRY TRN VAL CRUD QRY TRN VAL CRUD QRY TRN VAL Shared Infrastructure Usage CRUD QRY SR TRN DTO VAL_SCH Data Layer Connections CRUD QRY DB RT service#e1f5fe#01579b module#f3e5f5#4a148c#fff3e0 data#e8f5e9#1b5e20 client#fce4ec#880e4f orchestration#f0f4c3#33691e PS CRUD_SCH SB UI SF orchestration",
      "source": "system-prd/SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md",
      "line": 3,
      "matched": "ReturnType"
    },
    {
      "statement": "CS CRUD QRY TRN VAL CRUD QRY TRN VAL CRUD QRY TRN VAL Shared Infrastructure Usage CRUD QRY SR TRN DTO VAL_SCH Data Layer Connections CRUD QRY DB RT service#e1f5fe#01579b module#f3e5f5#4a148c#fff3e0 data#e8f5e9#1b5e20 client#fce4ec#880e4f orchestration#f0f4c3#33691e PS CRUD_SCH SB UI SF orchestration\n\nArchitectural Patterns Functional Factory Pattern Explicit Interfaces CORRECT Explicit interface type signatures export interface PlayerService getById<ServiceResult searchPlayers create update factory explicit interface export function createPlayerService PlayerService crudService searchService queryService Pure composition no internal state side effects Export explicit type ReturnType PlayerServiceType PlayerService ANTI-PATTERNS AVOID NO BaseService ServiceFactoryexport PlayerService ReturnType createPlayerService(supabase SupabaseClient return incomplete interfaces class wrappers services default exports named exports Operation Wrapper Pattern Standardized error handling result transformation export async function executeOperation<T> Promise<ServiceResult Module Composition service specialized modules Basic database operations Complex workflows Advanced queries DTO mapping data transformation Input validation ServiceResult Pattern ServiceResult<T data error success status timestamp requestId\n\nDomain Player search Identity management Profile validation Visit tracking statistics transition Rating Slip Point calculations Table assignments Status transitions Casino table Floor Game settings Inventory management Chip counts Shift handovers Fill slips MTL Money transaction logging CTR reporting$10k Gaming day calculations Compliance Audit trails Notes Staff Audit logging Witness checks validations Regulatory reporting",
      "source": "system-prd/SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md",
      "line": 7,
      "matched": "ReturnType"
    }
  ],
  "temporal_refs": [
    {
      "reference": "Week 3",
      "source": "INDEX.md",
      "line": 13,
      "context": "Key Documents Use Case implement new service[SERVICE_TEMPLATE_QUICK.md Start Service Reference implementation Tests] Test examples[PRD \u00a73.3] Standards write migration[DATABASE_TYPE_WORKFLOW.md Step-step guide Migration basics[ADR-001] Local vs remote strategy understand[BALANCED_ARCHITECTURE_QUICK.md Decision framework[CANONICAL_BLUEPRINT_MVP_PRD.md Complete spec[SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md Visual patterns[MVP_PRODUCTION_ROADMAP.md Implementation plan hybrid strategy check project status[SESSION_HANDOFF.md Current implementation state_PRODUCTION Timeline milestones_GAPS Missing components understand past decision-001-database-type-strategy Dual strategy-test-location-standardization Root-level test location_SYNTHESIS Hybrid strategy rationale Real-time strategy state management architectural decision_ARCHITECTURE_QUICK 4-second rule domain VERTICAL ALL domains HORIZONTAL.\" Check common scenarios Document ADR non-obvious team-impacting\n\nFinding Information Topic Primary Document Supporting Docs **Architecture [BALANCED_ARCHITECTURE_QUICK.md [CONSENSUS_SYNTHESIS.md [EVALUATION_FRAMEWORK.md [SERVICE_TEMPLATE_QUICK.md [PRD \u00a73.3 [Architecture Diagram **Database [DATABASE_TYPE_WORKFLOW.md [ADR-001 [Schema Drift Audit [TESTING_SETUP.md [PRD \u00a73.10 [ADR-002]-location-standardization-Patterns** [PRD \u00a74#4-anti-pattern-guardrails [Architecture Diagram **Roadmap** [MVP_PRODUCTION_ROADMAP.md [ARCHITECTURE_GAPS.md_STEPS_REPORT.md **Migrations** [DATABASE_WORKFLOW.md [DATABASE_TYPE_WORKFLOW.md Phase Status Approach Key Docs **Phase 0** Complete [COMPLETED_SETUP.md **Phase 1**-skeleton.md **Phase 2** 87.5% [SESSION_HANDOFF.md [SERVICE_RESPONSIBILITY_MATRIX.md3** HORIZONTAL VERTICAL Week 3: State mgmt Weeks 4-6 Player/Visit/RatingSlip VERTICAL HYBRID Week 7-8-compliance Pending HORIZONTAL Week 9-10-production-hardening-weeks-9-10\n\nLearning Path Developer Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 Read_BLUEPRINT_MVP_PRD.md \u00a71-4 (30 Review_LAYER_ARCHITECTURE_DIAGRAM.md (15 Study Service Implementation Follow_TYPE_WORKFLOW.md Implement test service_TEMPLATE_QUICK.md (2h ~4 hours Architect/Tech Lead Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 [PRD Review Production Roadmap Analyze [Architecture Gaps Study [ADR-001 Review [Session Handoff (15 Optional [CONSENSUS_SYNTHESIS.mddeep dive hours architectural 3h dive"
    },
    {
      "reference": "Week 7",
      "source": "INDEX.md",
      "line": 13,
      "context": "Key Documents Use Case implement new service[SERVICE_TEMPLATE_QUICK.md Start Service Reference implementation Tests] Test examples[PRD \u00a73.3] Standards write migration[DATABASE_TYPE_WORKFLOW.md Step-step guide Migration basics[ADR-001] Local vs remote strategy understand[BALANCED_ARCHITECTURE_QUICK.md Decision framework[CANONICAL_BLUEPRINT_MVP_PRD.md Complete spec[SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md Visual patterns[MVP_PRODUCTION_ROADMAP.md Implementation plan hybrid strategy check project status[SESSION_HANDOFF.md Current implementation state_PRODUCTION Timeline milestones_GAPS Missing components understand past decision-001-database-type-strategy Dual strategy-test-location-standardization Root-level test location_SYNTHESIS Hybrid strategy rationale Real-time strategy state management architectural decision_ARCHITECTURE_QUICK 4-second rule domain VERTICAL ALL domains HORIZONTAL.\" Check common scenarios Document ADR non-obvious team-impacting\n\nFinding Information Topic Primary Document Supporting Docs **Architecture [BALANCED_ARCHITECTURE_QUICK.md [CONSENSUS_SYNTHESIS.md [EVALUATION_FRAMEWORK.md [SERVICE_TEMPLATE_QUICK.md [PRD \u00a73.3 [Architecture Diagram **Database [DATABASE_TYPE_WORKFLOW.md [ADR-001 [Schema Drift Audit [TESTING_SETUP.md [PRD \u00a73.10 [ADR-002]-location-standardization-Patterns** [PRD \u00a74#4-anti-pattern-guardrails [Architecture Diagram **Roadmap** [MVP_PRODUCTION_ROADMAP.md [ARCHITECTURE_GAPS.md_STEPS_REPORT.md **Migrations** [DATABASE_WORKFLOW.md [DATABASE_TYPE_WORKFLOW.md Phase Status Approach Key Docs **Phase 0** Complete [COMPLETED_SETUP.md **Phase 1**-skeleton.md **Phase 2** 87.5% [SESSION_HANDOFF.md [SERVICE_RESPONSIBILITY_MATRIX.md3** HORIZONTAL VERTICAL Week 3: State mgmt Weeks 4-6 Player/Visit/RatingSlip VERTICAL HYBRID Week 7-8-compliance Pending HORIZONTAL Week 9-10-production-hardening-weeks-9-10\n\nLearning Path Developer Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 Read_BLUEPRINT_MVP_PRD.md \u00a71-4 (30 Review_LAYER_ARCHITECTURE_DIAGRAM.md (15 Study Service Implementation Follow_TYPE_WORKFLOW.md Implement test service_TEMPLATE_QUICK.md (2h ~4 hours Architect/Tech Lead Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 [PRD Review Production Roadmap Analyze [Architecture Gaps Study [ADR-001 Review [Session Handoff (15 Optional [CONSENSUS_SYNTHESIS.mddeep dive hours architectural 3h dive"
    },
    {
      "reference": "Week 9",
      "source": "INDEX.md",
      "line": 13,
      "context": "Key Documents Use Case implement new service[SERVICE_TEMPLATE_QUICK.md Start Service Reference implementation Tests] Test examples[PRD \u00a73.3] Standards write migration[DATABASE_TYPE_WORKFLOW.md Step-step guide Migration basics[ADR-001] Local vs remote strategy understand[BALANCED_ARCHITECTURE_QUICK.md Decision framework[CANONICAL_BLUEPRINT_MVP_PRD.md Complete spec[SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md Visual patterns[MVP_PRODUCTION_ROADMAP.md Implementation plan hybrid strategy check project status[SESSION_HANDOFF.md Current implementation state_PRODUCTION Timeline milestones_GAPS Missing components understand past decision-001-database-type-strategy Dual strategy-test-location-standardization Root-level test location_SYNTHESIS Hybrid strategy rationale Real-time strategy state management architectural decision_ARCHITECTURE_QUICK 4-second rule domain VERTICAL ALL domains HORIZONTAL.\" Check common scenarios Document ADR non-obvious team-impacting\n\nFinding Information Topic Primary Document Supporting Docs **Architecture [BALANCED_ARCHITECTURE_QUICK.md [CONSENSUS_SYNTHESIS.md [EVALUATION_FRAMEWORK.md [SERVICE_TEMPLATE_QUICK.md [PRD \u00a73.3 [Architecture Diagram **Database [DATABASE_TYPE_WORKFLOW.md [ADR-001 [Schema Drift Audit [TESTING_SETUP.md [PRD \u00a73.10 [ADR-002]-location-standardization-Patterns** [PRD \u00a74#4-anti-pattern-guardrails [Architecture Diagram **Roadmap** [MVP_PRODUCTION_ROADMAP.md [ARCHITECTURE_GAPS.md_STEPS_REPORT.md **Migrations** [DATABASE_WORKFLOW.md [DATABASE_TYPE_WORKFLOW.md Phase Status Approach Key Docs **Phase 0** Complete [COMPLETED_SETUP.md **Phase 1**-skeleton.md **Phase 2** 87.5% [SESSION_HANDOFF.md [SERVICE_RESPONSIBILITY_MATRIX.md3** HORIZONTAL VERTICAL Week 3: State mgmt Weeks 4-6 Player/Visit/RatingSlip VERTICAL HYBRID Week 7-8-compliance Pending HORIZONTAL Week 9-10-production-hardening-weeks-9-10\n\nLearning Path Developer Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 Read_BLUEPRINT_MVP_PRD.md \u00a71-4 (30 Review_LAYER_ARCHITECTURE_DIAGRAM.md (15 Study Service Implementation Follow_TYPE_WORKFLOW.md Implement test service_TEMPLATE_QUICK.md (2h ~4 hours Architect/Tech Lead Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 [PRD Review Production Roadmap Analyze [Architecture Gaps Study [ADR-001 Review [Session Handoff (15 Optional [CONSENSUS_SYNTHESIS.mddeep dive hours architectural 3h dive"
    },
    {
      "reference": "2025-10-10",
      "source": "INDEX.md",
      "line": 1,
      "context": "Documentation Casino Tracker V2 Phase 2 Service Layer.5% 2025-10-10 Hybrid Model VERTICAL\n\nQuick Start Developers Type Workflow Daily database management Template 2-page guide Architecture HORIZONTAL VERTICAL decision framework 2 Session implementation status Architects Blueprint MVP PRD spec Layer Architecture Service patterns anti-patterns Production Roadmap 10-week path production hybrid strategy Gaps Missing HORIZONTAL/VERTICAL Contexts_RESPONSIBILITY_MATRIX responsibility matrix"
    },
    {
      "reference": "2025-10-10",
      "source": "INDEX.md",
      "line": 23,
      "context": "Document Maintenance Review Schedule [SESSION_HANDOFF.md Updated summary [MVP_PRODUCTION_ROADMAP.md Timeline adjustments_MVP Architecture refinements Document Owners Tech Lead Product Tech Lead Senior Developers DevOps Developers Architecture Team\n\nNeed Help Common Questions HORIZONTAL or [BALANCED_ARCHITECTURE_QUICK.md type file [DATABASE_TYPE_WORKFLOW.md write [SERVICE_TEMPLATE_QUICK.md anti-pattern [PRD \u00a74 MVP [MVP_PRODUCTION_ROADMAP.md 6. [SESSION_HANDOFF.md Document Not Found? Check wrong phase folder Renamed Not created parent project 1.2.0 2025-10-10 Development Team Hybrid Model (HORIZONTAL + VERTICAL)\n\nUpdates (v1.2.0 2025-10-10) Hybrid Architecture Strategy_ARCHITECTURE_QUICK.md 10-min decision guide_SYNTHESIS.md docs HORIZONTAL/VERTICAL labels layers vertical feature delivery MTL Service 2 87.5%/mtl transactions regulatory CTR compliance queries 98 tests Test Location Standardization-level/services Casino TableContext MTL tests services pattern Updates (v1.1.0) Schema Consistency PlayerFinancialService cases Bounded Context Clarity Responsibility Matrix"
    },
    {
      "reference": "2025-10-10",
      "source": "INDEX.md",
      "line": 25,
      "context": "Need Help Common Questions HORIZONTAL or [BALANCED_ARCHITECTURE_QUICK.md type file [DATABASE_TYPE_WORKFLOW.md write [SERVICE_TEMPLATE_QUICK.md anti-pattern [PRD \u00a74 MVP [MVP_PRODUCTION_ROADMAP.md 6. [SESSION_HANDOFF.md Document Not Found? Check wrong phase folder Renamed Not created parent project 1.2.0 2025-10-10 Development Team Hybrid Model (HORIZONTAL + VERTICAL)\n\nUpdates (v1.2.0 2025-10-10) Hybrid Architecture Strategy_ARCHITECTURE_QUICK.md 10-min decision guide_SYNTHESIS.md docs HORIZONTAL/VERTICAL labels layers vertical feature delivery MTL Service 2 87.5%/mtl transactions regulatory CTR compliance queries 98 tests Test Location Standardization-level/services Casino TableContext MTL tests services pattern Updates (v1.1.0) Schema Consistency PlayerFinancialService cases Bounded Context Clarity Responsibility Matrix"
    },
    {
      "reference": "COMPLETED",
      "source": "INDEX.md",
      "line": 5,
      "context": "Quick Start Developers Type Workflow Daily database management Template 2-page guide Architecture HORIZONTAL VERTICAL decision framework 2 Session implementation status Architects Blueprint MVP PRD spec Layer Architecture Service patterns anti-patterns Production Roadmap 10-week path production hybrid strategy Gaps Missing HORIZONTAL/VERTICAL Contexts_RESPONSIBILITY_MATRIX responsibility matrix\n\nDocumentation System Architecture CANONICAL_BLUEPRINT_PRD SERVICE_LAYER_ARCHITECTURE_DIAGRAM Service patterns diagrams \u00a73.3 Service Layer Standards \u00a74 Anti-Pattern Guardrails Architecture Diagram PT-1 patterns Patterns Templates SERVICE_TEMPLATE BALANCED_ARCHITECTURE_QUICK Hybrid strategy controlled-hybrid-refactor-model TDD PT-1 mining strategy_ARCHITECTURE_QUICK_TEMPLATE migration-hybrid-refactor-model Workflows DATABASE_TYPE_WORKFLOW Local remote DB management Regenerate types Deploy remote Sync local DB MVP_PRODUCTION_ROADMAP 10-week timeline hybrid strategy ARCHITECTURE_GAPS Missing components NEXT_STEPS_REPORTImmediate actions pattern application Phase-phase deliverables HORIZONTAL/VERTICAL rhythm blockers approach Week-by-week hybrid pattern application Architecture Decisions ADR-001-dual-database-strategy Local remote file rationale ADR-002-test-location-standardization Root-level test location standard CONSENSUS_SYNTHESIS Hybrid strategy analysis EVALUATION_FRAMEWORK Decision matrices UPDATE_SUMMARY Roadmap alignment Context problem statement options Decision outcome rationale Compliance PRD Strategy_ARCHITECTURE_QUICK_SYNTHESIS_FRAMEWORK Phase Documentation COMPLETED TESTING_SETUP DATABASE_WORKFLOW Migration workflow implementation security-skeleton RLS JWT Audit setup SESSION_HANDOFFstatus 1 player-vertical-slice TDD controlled-refactor Moved patterns\n\nComplete (CI/CD Testing Security JWT Compliance 87.5% (7/8 services MTL 98 tests Next (HORIZONTAL state mgmt VERTICAL UI delivery Pending Production Audits Analysis Local remote analysis Executive summary decision Type file consistency validation Anti-pattern detection Bundle size Lighthouse"
    },
    {
      "reference": "Complete",
      "source": "INDEX.md",
      "line": 7,
      "context": "Documentation System Architecture CANONICAL_BLUEPRINT_PRD SERVICE_LAYER_ARCHITECTURE_DIAGRAM Service patterns diagrams \u00a73.3 Service Layer Standards \u00a74 Anti-Pattern Guardrails Architecture Diagram PT-1 patterns Patterns Templates SERVICE_TEMPLATE BALANCED_ARCHITECTURE_QUICK Hybrid strategy controlled-hybrid-refactor-model TDD PT-1 mining strategy_ARCHITECTURE_QUICK_TEMPLATE migration-hybrid-refactor-model Workflows DATABASE_TYPE_WORKFLOW Local remote DB management Regenerate types Deploy remote Sync local DB MVP_PRODUCTION_ROADMAP 10-week timeline hybrid strategy ARCHITECTURE_GAPS Missing components NEXT_STEPS_REPORTImmediate actions pattern application Phase-phase deliverables HORIZONTAL/VERTICAL rhythm blockers approach Week-by-week hybrid pattern application Architecture Decisions ADR-001-dual-database-strategy Local remote file rationale ADR-002-test-location-standardization Root-level test location standard CONSENSUS_SYNTHESIS Hybrid strategy analysis EVALUATION_FRAMEWORK Decision matrices UPDATE_SUMMARY Roadmap alignment Context problem statement options Decision outcome rationale Compliance PRD Strategy_ARCHITECTURE_QUICK_SYNTHESIS_FRAMEWORK Phase Documentation COMPLETED TESTING_SETUP DATABASE_WORKFLOW Migration workflow implementation security-skeleton RLS JWT Audit setup SESSION_HANDOFFstatus 1 player-vertical-slice TDD controlled-refactor Moved patterns\n\nComplete (CI/CD Testing Security JWT Compliance 87.5% (7/8 services MTL 98 tests Next (HORIZONTAL state mgmt VERTICAL UI delivery Pending Production Audits Analysis Local remote analysis Executive summary decision Type file consistency validation Anti-pattern detection Bundle size Lighthouse\n\nFocus 2 3 Transition Completed 1-2 Schema Consistency Migration PlayerFinancialService tests Casino Service Table Context Service MTL Service queries CTR Bounded Context Clarity Hybrid Architecture Strategy_ARCHITECTURE Test Location Standardization 3 Integration tests React Query infrastructure Server action wrapper Loyalty Service Next 3 Weeks Player Management UI Visit Tracking UI RatingSlip Creation UI Phase 2 Completion 7/8 services complete (87.5%) 98/98 tests Zero PRD violations Test coverage >80% Hybrid strategy"
    },
    {
      "reference": "Pending",
      "source": "INDEX.md",
      "line": 7,
      "context": "Documentation System Architecture CANONICAL_BLUEPRINT_PRD SERVICE_LAYER_ARCHITECTURE_DIAGRAM Service patterns diagrams \u00a73.3 Service Layer Standards \u00a74 Anti-Pattern Guardrails Architecture Diagram PT-1 patterns Patterns Templates SERVICE_TEMPLATE BALANCED_ARCHITECTURE_QUICK Hybrid strategy controlled-hybrid-refactor-model TDD PT-1 mining strategy_ARCHITECTURE_QUICK_TEMPLATE migration-hybrid-refactor-model Workflows DATABASE_TYPE_WORKFLOW Local remote DB management Regenerate types Deploy remote Sync local DB MVP_PRODUCTION_ROADMAP 10-week timeline hybrid strategy ARCHITECTURE_GAPS Missing components NEXT_STEPS_REPORTImmediate actions pattern application Phase-phase deliverables HORIZONTAL/VERTICAL rhythm blockers approach Week-by-week hybrid pattern application Architecture Decisions ADR-001-dual-database-strategy Local remote file rationale ADR-002-test-location-standardization Root-level test location standard CONSENSUS_SYNTHESIS Hybrid strategy analysis EVALUATION_FRAMEWORK Decision matrices UPDATE_SUMMARY Roadmap alignment Context problem statement options Decision outcome rationale Compliance PRD Strategy_ARCHITECTURE_QUICK_SYNTHESIS_FRAMEWORK Phase Documentation COMPLETED TESTING_SETUP DATABASE_WORKFLOW Migration workflow implementation security-skeleton RLS JWT Audit setup SESSION_HANDOFFstatus 1 player-vertical-slice TDD controlled-refactor Moved patterns\n\nComplete (CI/CD Testing Security JWT Compliance 87.5% (7/8 services MTL 98 tests Next (HORIZONTAL state mgmt VERTICAL UI delivery Pending Production Audits Analysis Local remote analysis Executive summary decision Type file consistency validation Anti-pattern detection Bundle size Lighthouse\n\nFocus 2 3 Transition Completed 1-2 Schema Consistency Migration PlayerFinancialService tests Casino Service Table Context Service MTL Service queries CTR Bounded Context Clarity Hybrid Architecture Strategy_ARCHITECTURE Test Location Standardization 3 Integration tests React Query infrastructure Server action wrapper Loyalty Service Next 3 Weeks Player Management UI Visit Tracking UI RatingSlip Creation UI Phase 2 Completion 7/8 services complete (87.5%) 98/98 tests Zero PRD violations Test coverage >80% Hybrid strategy"
    },
    {
      "reference": "Completed",
      "source": "INDEX.md",
      "line": 9,
      "context": "Complete (CI/CD Testing Security JWT Compliance 87.5% (7/8 services MTL 98 tests Next (HORIZONTAL state mgmt VERTICAL UI delivery Pending Production Audits Analysis Local remote analysis Executive summary decision Type file consistency validation Anti-pattern detection Bundle size Lighthouse\n\nFocus 2 3 Transition Completed 1-2 Schema Consistency Migration PlayerFinancialService tests Casino Service Table Context Service MTL Service queries CTR Bounded Context Clarity Hybrid Architecture Strategy_ARCHITECTURE Test Location Standardization 3 Integration tests React Query infrastructure Server action wrapper Loyalty Service Next 3 Weeks Player Management UI Visit Tracking UI RatingSlip Creation UI Phase 2 Completion 7/8 services complete (87.5%) 98/98 tests Zero PRD violations Test coverage >80% Hybrid strategy\n\nKey Documents Use Case implement new service[SERVICE_TEMPLATE_QUICK.md Start Service Reference implementation Tests] Test examples[PRD \u00a73.3] Standards write migration[DATABASE_TYPE_WORKFLOW.md Step-step guide Migration basics[ADR-001] Local vs remote strategy understand[BALANCED_ARCHITECTURE_QUICK.md Decision framework[CANONICAL_BLUEPRINT_MVP_PRD.md Complete spec[SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md Visual patterns[MVP_PRODUCTION_ROADMAP.md Implementation plan hybrid strategy check project status[SESSION_HANDOFF.md Current implementation state_PRODUCTION Timeline milestones_GAPS Missing components understand past decision-001-database-type-strategy Dual strategy-test-location-standardization Root-level test location_SYNTHESIS Hybrid strategy rationale Real-time strategy state management architectural decision_ARCHITECTURE_QUICK 4-second rule domain VERTICAL ALL domains HORIZONTAL.\" Check common scenarios Document ADR non-obvious team-impacting"
    },
    {
      "reference": "complete",
      "source": "INDEX.md",
      "line": 9,
      "context": "Complete (CI/CD Testing Security JWT Compliance 87.5% (7/8 services MTL 98 tests Next (HORIZONTAL state mgmt VERTICAL UI delivery Pending Production Audits Analysis Local remote analysis Executive summary decision Type file consistency validation Anti-pattern detection Bundle size Lighthouse\n\nFocus 2 3 Transition Completed 1-2 Schema Consistency Migration PlayerFinancialService tests Casino Service Table Context Service MTL Service queries CTR Bounded Context Clarity Hybrid Architecture Strategy_ARCHITECTURE Test Location Standardization 3 Integration tests React Query infrastructure Server action wrapper Loyalty Service Next 3 Weeks Player Management UI Visit Tracking UI RatingSlip Creation UI Phase 2 Completion 7/8 services complete (87.5%) 98/98 tests Zero PRD violations Test coverage >80% Hybrid strategy\n\nKey Documents Use Case implement new service[SERVICE_TEMPLATE_QUICK.md Start Service Reference implementation Tests] Test examples[PRD \u00a73.3] Standards write migration[DATABASE_TYPE_WORKFLOW.md Step-step guide Migration basics[ADR-001] Local vs remote strategy understand[BALANCED_ARCHITECTURE_QUICK.md Decision framework[CANONICAL_BLUEPRINT_MVP_PRD.md Complete spec[SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md Visual patterns[MVP_PRODUCTION_ROADMAP.md Implementation plan hybrid strategy check project status[SESSION_HANDOFF.md Current implementation state_PRODUCTION Timeline milestones_GAPS Missing components understand past decision-001-database-type-strategy Dual strategy-test-location-standardization Root-level test location_SYNTHESIS Hybrid strategy rationale Real-time strategy state management architectural decision_ARCHITECTURE_QUICK 4-second rule domain VERTICAL ALL domains HORIZONTAL.\" Check common scenarios Document ADR non-obvious team-impacting"
    },
    {
      "reference": "Complete",
      "source": "INDEX.md",
      "line": 11,
      "context": "Focus 2 3 Transition Completed 1-2 Schema Consistency Migration PlayerFinancialService tests Casino Service Table Context Service MTL Service queries CTR Bounded Context Clarity Hybrid Architecture Strategy_ARCHITECTURE Test Location Standardization 3 Integration tests React Query infrastructure Server action wrapper Loyalty Service Next 3 Weeks Player Management UI Visit Tracking UI RatingSlip Creation UI Phase 2 Completion 7/8 services complete (87.5%) 98/98 tests Zero PRD violations Test coverage >80% Hybrid strategy\n\nKey Documents Use Case implement new service[SERVICE_TEMPLATE_QUICK.md Start Service Reference implementation Tests] Test examples[PRD \u00a73.3] Standards write migration[DATABASE_TYPE_WORKFLOW.md Step-step guide Migration basics[ADR-001] Local vs remote strategy understand[BALANCED_ARCHITECTURE_QUICK.md Decision framework[CANONICAL_BLUEPRINT_MVP_PRD.md Complete spec[SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md Visual patterns[MVP_PRODUCTION_ROADMAP.md Implementation plan hybrid strategy check project status[SESSION_HANDOFF.md Current implementation state_PRODUCTION Timeline milestones_GAPS Missing components understand past decision-001-database-type-strategy Dual strategy-test-location-standardization Root-level test location_SYNTHESIS Hybrid strategy rationale Real-time strategy state management architectural decision_ARCHITECTURE_QUICK 4-second rule domain VERTICAL ALL domains HORIZONTAL.\" Check common scenarios Document ADR non-obvious team-impacting\n\nFinding Information Topic Primary Document Supporting Docs **Architecture [BALANCED_ARCHITECTURE_QUICK.md [CONSENSUS_SYNTHESIS.md [EVALUATION_FRAMEWORK.md [SERVICE_TEMPLATE_QUICK.md [PRD \u00a73.3 [Architecture Diagram **Database [DATABASE_TYPE_WORKFLOW.md [ADR-001 [Schema Drift Audit [TESTING_SETUP.md [PRD \u00a73.10 [ADR-002]-location-standardization-Patterns** [PRD \u00a74#4-anti-pattern-guardrails [Architecture Diagram **Roadmap** [MVP_PRODUCTION_ROADMAP.md [ARCHITECTURE_GAPS.md_STEPS_REPORT.md **Migrations** [DATABASE_WORKFLOW.md [DATABASE_TYPE_WORKFLOW.md Phase Status Approach Key Docs **Phase 0** Complete [COMPLETED_SETUP.md **Phase 1**-skeleton.md **Phase 2** 87.5% [SESSION_HANDOFF.md [SERVICE_RESPONSIBILITY_MATRIX.md3** HORIZONTAL VERTICAL Week 3: State mgmt Weeks 4-6 Player/Visit/RatingSlip VERTICAL HYBRID Week 7-8-compliance Pending HORIZONTAL Week 9-10-production-hardening-weeks-9-10"
    },
    {
      "reference": "Complete",
      "source": "INDEX.md",
      "line": 13,
      "context": "Key Documents Use Case implement new service[SERVICE_TEMPLATE_QUICK.md Start Service Reference implementation Tests] Test examples[PRD \u00a73.3] Standards write migration[DATABASE_TYPE_WORKFLOW.md Step-step guide Migration basics[ADR-001] Local vs remote strategy understand[BALANCED_ARCHITECTURE_QUICK.md Decision framework[CANONICAL_BLUEPRINT_MVP_PRD.md Complete spec[SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md Visual patterns[MVP_PRODUCTION_ROADMAP.md Implementation plan hybrid strategy check project status[SESSION_HANDOFF.md Current implementation state_PRODUCTION Timeline milestones_GAPS Missing components understand past decision-001-database-type-strategy Dual strategy-test-location-standardization Root-level test location_SYNTHESIS Hybrid strategy rationale Real-time strategy state management architectural decision_ARCHITECTURE_QUICK 4-second rule domain VERTICAL ALL domains HORIZONTAL.\" Check common scenarios Document ADR non-obvious team-impacting\n\nFinding Information Topic Primary Document Supporting Docs **Architecture [BALANCED_ARCHITECTURE_QUICK.md [CONSENSUS_SYNTHESIS.md [EVALUATION_FRAMEWORK.md [SERVICE_TEMPLATE_QUICK.md [PRD \u00a73.3 [Architecture Diagram **Database [DATABASE_TYPE_WORKFLOW.md [ADR-001 [Schema Drift Audit [TESTING_SETUP.md [PRD \u00a73.10 [ADR-002]-location-standardization-Patterns** [PRD \u00a74#4-anti-pattern-guardrails [Architecture Diagram **Roadmap** [MVP_PRODUCTION_ROADMAP.md [ARCHITECTURE_GAPS.md_STEPS_REPORT.md **Migrations** [DATABASE_WORKFLOW.md [DATABASE_TYPE_WORKFLOW.md Phase Status Approach Key Docs **Phase 0** Complete [COMPLETED_SETUP.md **Phase 1**-skeleton.md **Phase 2** 87.5% [SESSION_HANDOFF.md [SERVICE_RESPONSIBILITY_MATRIX.md3** HORIZONTAL VERTICAL Week 3: State mgmt Weeks 4-6 Player/Visit/RatingSlip VERTICAL HYBRID Week 7-8-compliance Pending HORIZONTAL Week 9-10-production-hardening-weeks-9-10\n\nLearning Path Developer Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 Read_BLUEPRINT_MVP_PRD.md \u00a71-4 (30 Review_LAYER_ARCHITECTURE_DIAGRAM.md (15 Study Service Implementation Follow_TYPE_WORKFLOW.md Implement test service_TEMPLATE_QUICK.md (2h ~4 hours Architect/Tech Lead Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 [PRD Review Production Roadmap Analyze [Architecture Gaps Study [ADR-001 Review [Session Handoff (15 Optional [CONSENSUS_SYNTHESIS.mddeep dive hours architectural 3h dive"
    },
    {
      "reference": "COMPLETED",
      "source": "INDEX.md",
      "line": 13,
      "context": "Key Documents Use Case implement new service[SERVICE_TEMPLATE_QUICK.md Start Service Reference implementation Tests] Test examples[PRD \u00a73.3] Standards write migration[DATABASE_TYPE_WORKFLOW.md Step-step guide Migration basics[ADR-001] Local vs remote strategy understand[BALANCED_ARCHITECTURE_QUICK.md Decision framework[CANONICAL_BLUEPRINT_MVP_PRD.md Complete spec[SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md Visual patterns[MVP_PRODUCTION_ROADMAP.md Implementation plan hybrid strategy check project status[SESSION_HANDOFF.md Current implementation state_PRODUCTION Timeline milestones_GAPS Missing components understand past decision-001-database-type-strategy Dual strategy-test-location-standardization Root-level test location_SYNTHESIS Hybrid strategy rationale Real-time strategy state management architectural decision_ARCHITECTURE_QUICK 4-second rule domain VERTICAL ALL domains HORIZONTAL.\" Check common scenarios Document ADR non-obvious team-impacting\n\nFinding Information Topic Primary Document Supporting Docs **Architecture [BALANCED_ARCHITECTURE_QUICK.md [CONSENSUS_SYNTHESIS.md [EVALUATION_FRAMEWORK.md [SERVICE_TEMPLATE_QUICK.md [PRD \u00a73.3 [Architecture Diagram **Database [DATABASE_TYPE_WORKFLOW.md [ADR-001 [Schema Drift Audit [TESTING_SETUP.md [PRD \u00a73.10 [ADR-002]-location-standardization-Patterns** [PRD \u00a74#4-anti-pattern-guardrails [Architecture Diagram **Roadmap** [MVP_PRODUCTION_ROADMAP.md [ARCHITECTURE_GAPS.md_STEPS_REPORT.md **Migrations** [DATABASE_WORKFLOW.md [DATABASE_TYPE_WORKFLOW.md Phase Status Approach Key Docs **Phase 0** Complete [COMPLETED_SETUP.md **Phase 1**-skeleton.md **Phase 2** 87.5% [SESSION_HANDOFF.md [SERVICE_RESPONSIBILITY_MATRIX.md3** HORIZONTAL VERTICAL Week 3: State mgmt Weeks 4-6 Player/Visit/RatingSlip VERTICAL HYBRID Week 7-8-compliance Pending HORIZONTAL Week 9-10-production-hardening-weeks-9-10\n\nLearning Path Developer Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 Read_BLUEPRINT_MVP_PRD.md \u00a71-4 (30 Review_LAYER_ARCHITECTURE_DIAGRAM.md (15 Study Service Implementation Follow_TYPE_WORKFLOW.md Implement test service_TEMPLATE_QUICK.md (2h ~4 hours Architect/Tech Lead Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 [PRD Review Production Roadmap Analyze [Architecture Gaps Study [ADR-001 Review [Session Handoff (15 Optional [CONSENSUS_SYNTHESIS.mddeep dive hours architectural 3h dive"
    },
    {
      "reference": "Pending",
      "source": "INDEX.md",
      "line": 13,
      "context": "Key Documents Use Case implement new service[SERVICE_TEMPLATE_QUICK.md Start Service Reference implementation Tests] Test examples[PRD \u00a73.3] Standards write migration[DATABASE_TYPE_WORKFLOW.md Step-step guide Migration basics[ADR-001] Local vs remote strategy understand[BALANCED_ARCHITECTURE_QUICK.md Decision framework[CANONICAL_BLUEPRINT_MVP_PRD.md Complete spec[SERVICE_LAYER_ARCHITECTURE_DIAGRAM.md Visual patterns[MVP_PRODUCTION_ROADMAP.md Implementation plan hybrid strategy check project status[SESSION_HANDOFF.md Current implementation state_PRODUCTION Timeline milestones_GAPS Missing components understand past decision-001-database-type-strategy Dual strategy-test-location-standardization Root-level test location_SYNTHESIS Hybrid strategy rationale Real-time strategy state management architectural decision_ARCHITECTURE_QUICK 4-second rule domain VERTICAL ALL domains HORIZONTAL.\" Check common scenarios Document ADR non-obvious team-impacting\n\nFinding Information Topic Primary Document Supporting Docs **Architecture [BALANCED_ARCHITECTURE_QUICK.md [CONSENSUS_SYNTHESIS.md [EVALUATION_FRAMEWORK.md [SERVICE_TEMPLATE_QUICK.md [PRD \u00a73.3 [Architecture Diagram **Database [DATABASE_TYPE_WORKFLOW.md [ADR-001 [Schema Drift Audit [TESTING_SETUP.md [PRD \u00a73.10 [ADR-002]-location-standardization-Patterns** [PRD \u00a74#4-anti-pattern-guardrails [Architecture Diagram **Roadmap** [MVP_PRODUCTION_ROADMAP.md [ARCHITECTURE_GAPS.md_STEPS_REPORT.md **Migrations** [DATABASE_WORKFLOW.md [DATABASE_TYPE_WORKFLOW.md Phase Status Approach Key Docs **Phase 0** Complete [COMPLETED_SETUP.md **Phase 1**-skeleton.md **Phase 2** 87.5% [SESSION_HANDOFF.md [SERVICE_RESPONSIBILITY_MATRIX.md3** HORIZONTAL VERTICAL Week 3: State mgmt Weeks 4-6 Player/Visit/RatingSlip VERTICAL HYBRID Week 7-8-compliance Pending HORIZONTAL Week 9-10-production-hardening-weeks-9-10\n\nLearning Path Developer Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 Read_BLUEPRINT_MVP_PRD.md \u00a71-4 (30 Review_LAYER_ARCHITECTURE_DIAGRAM.md (15 Study Service Implementation Follow_TYPE_WORKFLOW.md Implement test service_TEMPLATE_QUICK.md (2h ~4 hours Architect/Tech Lead Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 [PRD Review Production Roadmap Analyze [Architecture Gaps Study [ADR-001 Review [Session Handoff (15 Optional [CONSENSUS_SYNTHESIS.mddeep dive hours architectural 3h dive"
    },
    {
      "reference": "Complete",
      "source": "INDEX.md",
      "line": 17,
      "context": "Learning Path Developer Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 Read_BLUEPRINT_MVP_PRD.md \u00a71-4 (30 Review_LAYER_ARCHITECTURE_DIAGRAM.md (15 Study Service Implementation Follow_TYPE_WORKFLOW.md Implement test service_TEMPLATE_QUICK.md (2h ~4 hours Architect/Tech Lead Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 [PRD Review Production Roadmap Analyze [Architecture Gaps Study [ADR-001 Review [Session Handoff (15 Optional [CONSENSUS_SYNTHESIS.mddeep dive hours architectural 3h dive\n\nDocumentation Complete diagrams ADRs hybrid strategy hybrid model decision framework Partial pending Updated strategy Started Phases 0-2 documented 3-5 pending Additions_ARCHITECTURE_QUICK Hybrid strategy decision framework architectural analysis_SUMMARY Roadmap alignment tracking roadmap docs labels Upcoming Documentation React Query server action patterns stores Compliance workflows MTL reporting real patterns Performance optimization deployment procedures State management strategy real-time strategy security patterns\n\nExternal References Supabase Documentation Development [Type Generation-types [RLS Policies-level-security Next.js Documentation [App Router [Server Actions-fetching-actions-mutations Testing Documentation [Jest [React Testing Library [Cypress"
    },
    {
      "reference": "pending",
      "source": "INDEX.md",
      "line": 17,
      "context": "Learning Path Developer Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 Read_BLUEPRINT_MVP_PRD.md \u00a71-4 (30 Review_LAYER_ARCHITECTURE_DIAGRAM.md (15 Study Service Implementation Follow_TYPE_WORKFLOW.md Implement test service_TEMPLATE_QUICK.md (2h ~4 hours Architect/Tech Lead Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 [PRD Review Production Roadmap Analyze [Architecture Gaps Study [ADR-001 Review [Session Handoff (15 Optional [CONSENSUS_SYNTHESIS.mddeep dive hours architectural 3h dive\n\nDocumentation Complete diagrams ADRs hybrid strategy hybrid model decision framework Partial pending Updated strategy Started Phases 0-2 documented 3-5 pending Additions_ARCHITECTURE_QUICK Hybrid strategy decision framework architectural analysis_SUMMARY Roadmap alignment tracking roadmap docs labels Upcoming Documentation React Query server action patterns stores Compliance workflows MTL reporting real patterns Performance optimization deployment procedures State management strategy real-time strategy security patterns\n\nExternal References Supabase Documentation Development [Type Generation-types [RLS Policies-level-security Next.js Documentation [App Router [Server Actions-fetching-actions-mutations Testing Documentation [Jest [React Testing Library [Cypress"
    },
    {
      "reference": "pending",
      "source": "INDEX.md",
      "line": 17,
      "context": "Learning Path Developer Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 Read_BLUEPRINT_MVP_PRD.md \u00a71-4 (30 Review_LAYER_ARCHITECTURE_DIAGRAM.md (15 Study Service Implementation Follow_TYPE_WORKFLOW.md Implement test service_TEMPLATE_QUICK.md (2h ~4 hours Architect/Tech Lead Onboarding Read [BALANCED_ARCHITECTURE_QUICK.md (10 [PRD Review Production Roadmap Analyze [Architecture Gaps Study [ADR-001 Review [Session Handoff (15 Optional [CONSENSUS_SYNTHESIS.mddeep dive hours architectural 3h dive\n\nDocumentation Complete diagrams ADRs hybrid strategy hybrid model decision framework Partial pending Updated strategy Started Phases 0-2 documented 3-5 pending Additions_ARCHITECTURE_QUICK Hybrid strategy decision framework architectural analysis_SUMMARY Roadmap alignment tracking roadmap docs labels Upcoming Documentation React Query server action patterns stores Compliance workflows MTL reporting real patterns Performance optimization deployment procedures State management strategy real-time strategy security patterns\n\nExternal References Supabase Documentation Development [Type Generation-types [RLS Policies-level-security Next.js Documentation [App Router [Server Actions-fetching-actions-mutations Testing Documentation [Jest [React Testing Library [Cypress"
    },
    {
      "reference": "2025-10-06",
      "source": "workflows/DATABASE_TYPE_WORKFLOW.md",
      "line": 25,
      "context": "Reference Card Task Command local run db:types migration start day remote remote deployment local `supabase db reset Daily sync migrations remote db diff --linked Before deployment db push --linked local validation migration <name Feature development migration list Check migration status\n\nRelated Documentation-001 Dual Database Type Strategy rationale Drift Audit Technical analysis_WORKFLOW.md setup CLI Docs Official reference 2025-10-06 Development Team"
    },
    {
      "reference": "Week 3",
      "source": "adr/NEXT_STEPS_REPORT.md",
      "line": 3,
      "context": "PT-2 Hybrid Architecture 2025-10-10 Phase 2 87.5% (7/8 services roadmap_ARCHITECTURE\n\nSummary 7/8 services 98 tests Template velocity 4x improvement MTL Service CTR aggregation Hybrid Week 3 integration Phase 3 HORIZONTAL VERTICAL UI infrastructure features hardening 2 infrastructure Phase 3 React Query domains vertical UI 4-5 Player Visit UI 6-8 Performance security deployment domains\n\nPhase 2 3) Completed MTL Service Day 6 cash transactions regulatory services/mtl index MTLService crud operations queries Compliance queries CTR aggregation19/19 tests create getById update delete listByGamingDay filtering $10k threshold history compliance aggregation CTR threshold $10,000 patron Gaming day Date-based filtering Direction cash_in_out Area pit cage slot poker kiosk sportsbook Tender types cash cashier_check tito money_order chips ~2 hours compliance query Priority Loyalty Service 1 Day Medium-High compliance 6-8 hours Priority 2: Search Query Pattern Mining 2 Days Apply PT-1 patterns 6 services advanced search/query Multi-word search relevance scoringJOIN patterns active queries~8.75h adapt-Specific Player Service Search/Queries Multi-word search name email phone Relevance scoring getActivePlayers getPlayersByTier Visit Service Search/Queries Search Date range filtering Player name search Casino location getActiveVisits getVisitsByDateRange getVisitsByCasino getPlayerVisitHistory RatingSlip Service Search/Queries Table search Player search Date range"
    }
  ]
}
